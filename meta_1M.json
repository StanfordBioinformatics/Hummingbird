{
  "workflowName": "atac",
  "actualWorkflowLanguageVersion": "draft-2",
  "submittedFiles": {
    "workflow": "# ENCODE DCC ATAC-Seq/DNase-Seq pipeline\n# Author: Jin Lee (leepc12@gmail.com)\n\nworkflow atac {\n\t### sample name, description\n\tString title = 'Untitled'\n\tString description = 'No description'\n\n\t### pipeline type\n\tString pipeline_type = 'atac'\t# ATAC-Seq (atac) or DNase-Seq (dnase)\n\t\t\t\t\t\t\t\t\t# the only difference is that tn5 shiting is enabled for atac\n\t### mandatory genome param\n\tFile genome_tsv \t\t# reference genome data TSV file including\n\t\t\t\t\t\t\t# all important genome specific data file paths and parameters\n\tBoolean paired_end\n\n\t### optional but important\n\tBoolean align_only = false\t\t# disable all post-align analysis (peak-calling, overlap, idr, ...)\n\tBoolean true_rep_only = false \t# disable all analyses for pseudo replicates\n\t\t\t\t\t\t\t\t\t# overlap and idr will also be disabled\n\n\tBoolean auto_detect_adapter = true\t# automatically detect/trim adapters\n\tInt cutadapt_min_trim_len = 5\t# minimum trim length for cutadapt -m\n\tFloat cutadapt_err_rate = 0.1\t# Maximum allowed adapter error rate for cutadapt -e\t\n\n\tInt multimapping = 0\t\t\t# for multimapping reads\n\n\tString bowtie2_score_min = ''\t# min acceptable alignment score func w.r.t read length\n\n\tString dup_marker = 'picard'\t# picard MarkDuplicates (picard) or sambamba markdup (sambamba)\n\tInt mapq_thresh = 30\t\t\t# threshold for low MAPQ reads removal\n\tBoolean no_dup_removal = false \t# no dupe reads removal when filtering BAM\n\t\t\t\t\t\t\t\t\t# dup.qc and pbc.qc will be empty files\n\t\t\t\t\t\t\t\t\t# and nodup_bam in the output is filtered bam with dupes\t\n\n\tString regex_filter_reads = 'chrM' \t# Perl-style regular expression pattern for chr name to filter out reads\n                        \t\t# to remove matching reads from TAGALIGN\n\tInt subsample_reads = 0\t\t# number of reads to subsample TAGALIGN\n\t\t\t\t\t\t\t\t# 0 for no subsampling. this affects all downstream analysis\n\n\tBoolean enable_xcor = false \t# enable cross-correlation analysis\n\tInt xcor_subsample_reads = 25000000\t# number of reads to subsample TAGALIGN\n\t\t\t\t\t\t\t\t# this will be used for xcor only\n\t\t\t\t\t\t\t\t# will not affect any downstream analysis\n\n\tBoolean keep_irregular_chr_in_bfilt_peak = false # when filtering with blacklist\n\t\t\t\t\t\t\t\t# do not filter peaks with irregular chr name\n\t\t\t\t\t\t\t\t# and just keep them in bfilt_peak file\n\t\t\t\t\t\t\t\t# (e.g. keep chr1_AABBCC, AABR07024382.1, ...)\n\t\t\t\t\t\t\t\t# reg-ex pattern for regular chr names: /chr[\\dXY]+[ \\t]/\n\tInt cap_num_peak = 300000\t# cap number of raw peaks called from MACS2\n\tFloat pval_thresh = 0.01\t# p.value threshold for MACS2\n\tInt smooth_win = 150\t\t# size of smoothing window\n\n\tBoolean enable_idr = false \t# enable IDR analysis on raw peaks\n\tFloat idr_thresh = 0.1\t\t# IDR threshold\n\n\tBoolean disable_ataqc = false\n\n\t### resources (disks: for cloud platforms)\n\tInt trim_adapter_cpu = 32\n\tInt trim_adapter_mem_mb = 12000\n\tInt trim_adapter_time_hr = 24\n\tString trim_adapter_disks = \"local-disk 100 HDD\"\n\n\tInt bowtie2_cpu = 32\n\tInt bowtie2_mem_mb = 20000\n\tInt bowtie2_time_hr = 48\n\tString bowtie2_disks = \"local-disk 100 HDD\"\n\n\tInt filter_cpu = 32\n\tInt filter_mem_mb = 20000\n\tInt filter_time_hr = 24\n\tString filter_disks = \"local-disk 100 HDD\"\n\n\tInt bam2ta_cpu = 32\n\tInt bam2ta_mem_mb = 10000\n\tInt bam2ta_time_hr = 6\n\tString bam2ta_disks = \"local-disk 100 HDD\"\n\n\tInt spr_mem_mb = 16000\n\n\tInt xcor_cpu = 32\n\tInt xcor_mem_mb = 16000\n\tInt xcor_time_hr = 6\n\tString xcor_disks = \"local-disk 100 HDD\"\n\n\tInt macs2_mem_mb = 16000\n\tInt macs2_time_hr = 24\n\tString macs2_disks = \"local-disk 100 HDD\"\n\n\tInt ataqc_mem_mb = 16000\n\tInt ataqc_mem_java_mb = 16000\n\tInt ataqc_time_hr = 24\n\tString ataqc_disks = \"local-disk 200 HDD\"\n\n\t#### input file definition\n\t\t# pipeline can start from any type of inputs and then leave all other types undefined\n\t\t# supported types: fastq, bam, nodup_bam (filtered bam), ta (tagAlign), peak\n\t\t# define up to 6 replicates\n\t\t# [rep_id] is for each replicate\n\n \t### fastqs and adapters  \t\n\t \t# define fastqs either with DNANexus style (1-dim array) or with default one (3-dim array)\n\t \t# [merge_id] is for pooing fastqs after trimming adapters\n\t \t# if adapters defined with any style, keep the same structure/dimension as fastq arrays\n\t \t# only defined adapters will be trimmed\n\t \t# or undefined adapters will be detected/trimmed by trim_adapter.auto_detect_adapter=true \n\t \t# so you can selectively detect/trim adapters for a specific fastq\n \t## DNANexus UI style fastq/adapter definition\n\tArray[File] fastqs_rep1_R1 = []\t# [merge_id]\n\tArray[File] fastqs_rep1_R2 = [] # do not define _R2 array if your sample is not paired end\n\tArray[File] fastqs_rep2_R1 = [] # do not define if you have a single replicate\n\tArray[File] fastqs_rep2_R2 = []\t# do not define _R2 array if your sample is not paired end\n\tArray[File] fastqs_rep3_R1 = [] # do not define if you have <=2 replicates\n\tArray[File] fastqs_rep3_R2 = []\t# do not define _R2 array if your sample is not paired end\n\tArray[File] fastqs_rep4_R1 = [] # do not define if you have <=3 replicates\n\tArray[File] fastqs_rep4_R2 = []\t# do not define _R2 array if your sample is not paired end\n\tArray[File] fastqs_rep5_R1 = [] # do not define if you have <=4 replicates\n\tArray[File] fastqs_rep5_R2 = []\t# do not define _R2 array if your sample is not paired end\n\tArray[File] fastqs_rep6_R1 = [] # do not define if you have <=5 replicates\n\tArray[File] fastqs_rep6_R2 = []\t# do not define _R2 array if your sample is not paired end\n\tArray[String] adapters_rep1_R1 = [] # [merge_id]\n\tArray[String] adapters_rep1_R2 = [] \n\tArray[String] adapters_rep2_R1 = []\n\tArray[String] adapters_rep2_R2 = []\n\tArray[String] adapters_rep3_R1 = []\n\tArray[String] adapters_rep3_R2 = []\n\tArray[String] adapters_rep4_R1 = []\n\tArray[String] adapters_rep4_R2 = []\n\tArray[String] adapters_rep5_R1 = []\n\tArray[String] adapters_rep5_R2 = []\n\tArray[String] adapters_rep6_R1 = []\n\tArray[String] adapters_rep6_R2 = []\n \t## default style fastq/adapter definition\n \t\t# [read_end_id] is for fastq R1 or fastq R2\n\tArray[Array[Array[File]]] fastqs = [] \t# [rep_id][merge_id][read_end_id]\n\tArray[Array[Array[File]]] adapters = []\t# [rep_id][merge_id][read_end_id]\n\n\t### other input types (bam, nodup_bam, ta)\n\tArray[File] bams = [] \t\t# [rep_id]\n\tArray[File] nodup_bams = [] # [rep_id]\n\tArray[File] tas = []\t\t# [rep_id]\n\n\t### other input types (peak)\n\tArray[File] peaks = []\t\t# [PAIR(rep_id1,rep_id2)]. example for 3 reps: [rep1_rep2, rep1_rep3, rep2_rep3]\n\tArray[File] peaks_pr1 = []\t# [rep_id]. do not define if true_rep=true\n\tArray[File] peaks_pr2 = []\t# [rep_id]. do not define if true_rep=true\n\tFile? peak_ppr1\t\t\t\t# do not define if you have a single replicate or true_rep=true\n\tFile? peak_ppr2\t\t\t\t# do not define if you have a single replicate or true_rep=true\n\tFile? peak_pooled\t\t\t# do not define if you have a single replicate or true_rep=true\n\n\t### temp vars (do not define these)\n\tString peak_type = 'narrowPeak' # peak type for IDR and overlap\n\tString idr_rank = 'p.value' # IDR ranking method\n\n\t### read genome data and paths\n\tcall read_genome_tsv { input:genome_tsv = genome_tsv }\n\tFile bowtie2_idx_tar = read_genome_tsv.genome['bowtie2_idx_tar']\n\tFile blacklist = read_genome_tsv.genome['blacklist']\n\tFile chrsz = read_genome_tsv.genome['chrsz']\n\tString gensz = read_genome_tsv.genome['gensz']\n\tFile ref_fa = read_genome_tsv.genome['ref_fa']\n\t# genome data for ATAQC\n\tFile tss_enrich = read_genome_tsv.genome['tss_enrich']\n\tFile dnase = read_genome_tsv.genome['dnase']\n\tFile prom = read_genome_tsv.genome['prom']\n\tFile enh = read_genome_tsv.genome['enh']\n\tFile reg2map = read_genome_tsv.genome['reg2map']\n\tFile reg2map_bed = read_genome_tsv.genome['reg2map_bed']\n\tFile roadmap_meta = read_genome_tsv.genome['roadmap_meta']\n\n\t### pipeline starts here\n\t# temporary 2-dim arrays for DNANexus style fastqs and adapters\t\n\tArray[Array[File]] fastqs_rep1 = if length(fastqs_rep1_R2)>0 then transpose([fastqs_rep1_R1,fastqs_rep1_R2])\n\t\t\t\t\t\t\t\t\telse transpose([fastqs_rep1_R1])\n\tArray[Array[File]] fastqs_rep2 = if length(fastqs_rep2_R2)>0 then transpose([fastqs_rep2_R1,fastqs_rep2_R2])\n\t\t\t\t\t\t\t\t\telse transpose([fastqs_rep2_R1])\n\tArray[Array[File]] fastqs_rep3 = if length(fastqs_rep3_R2)>0 then transpose([fastqs_rep3_R1,fastqs_rep3_R2])\n\t\t\t\t\t\t\t\t\telse transpose([fastqs_rep3_R1])\n\tArray[Array[File]] fastqs_rep4 = if length(fastqs_rep4_R2)>0 then transpose([fastqs_rep4_R1,fastqs_rep4_R2])\n\t\t\t\t\t\t\t\t\telse transpose([fastqs_rep4_R1])\n\tArray[Array[File]] fastqs_rep5 = if length(fastqs_rep5_R2)>0 then transpose([fastqs_rep5_R1,fastqs_rep5_R2])\n\t\t\t\t\t\t\t\t\telse transpose([fastqs_rep5_R1])\n\tArray[Array[File]] fastqs_rep6 = if length(fastqs_rep6_R2)>0 then transpose([fastqs_rep6_R1,fastqs_rep6_R2])\n\t\t\t\t\t\t\t\t\telse transpose([fastqs_rep6_R1])\n\tArray[Array[String]] adapters_rep1 = if length(adapters_rep1_R2)>0 then transpose([adapters_rep1_R1,adapters_rep1_R2])\n\t\t\t\t\t\t\t\t\telse transpose([adapters_rep1_R1])\n\tArray[Array[String]] adapters_rep2 = if length(adapters_rep2_R2)>0 then transpose([adapters_rep2_R1,adapters_rep2_R2])\n\t\t\t\t\t\t\t\t\telse transpose([adapters_rep2_R1])\n\tArray[Array[String]] adapters_rep3 = if length(adapters_rep3_R2)>0 then transpose([adapters_rep3_R1,adapters_rep3_R2])\n\t\t\t\t\t\t\t\t\telse transpose([adapters_rep3_R1])\n\tArray[Array[String]] adapters_rep4 = if length(adapters_rep4_R2)>0 then transpose([adapters_rep4_R1,adapters_rep4_R2])\n\t\t\t\t\t\t\t\t\telse transpose([adapters_rep4_R1])\n\tArray[Array[String]] adapters_rep5 = if length(adapters_rep5_R2)>0 then transpose([adapters_rep5_R1,adapters_rep5_R2])\n\t\t\t\t\t\t\t\t\telse transpose([adapters_rep5_R1])\n\tArray[Array[String]] adapters_rep6 = if length(adapters_rep6_R2)>0 then transpose([adapters_rep6_R1,adapters_rep6_R2])\n\t\t\t\t\t\t\t\t\telse transpose([adapters_rep6_R1])\n\n\tArray[Array[Array[File]]] fastqs_ = if length(fastqs_rep1)<1 then fastqs\n\t\telse if length(fastqs_rep2)<1 then [fastqs_rep1]\n\t\telse if length(fastqs_rep3)<1 then [fastqs_rep1,fastqs_rep2]\n\t\telse if length(fastqs_rep4)<1 then [fastqs_rep1,fastqs_rep2,fastqs_rep3]\n\t\telse if length(fastqs_rep5)<1 then [fastqs_rep1,fastqs_rep2,fastqs_rep3,fastqs_rep4]\n\t\telse if length(fastqs_rep6)<1 then [fastqs_rep1,fastqs_rep2,fastqs_rep3,fastqs_rep4,fastqs_rep5]\n\t\telse [fastqs_rep1,fastqs_rep2,fastqs_rep3,fastqs_rep4,fastqs_rep5,fastqs_rep6]\n\tArray[Array[Array[String]]] adapters_ = if length(adapters_rep1)<1 then adapters\n\t\telse if length(adapters_rep2)<1 then [adapters_rep1]\n\t\telse if length(adapters_rep3)<1 then [adapters_rep1,adapters_rep2]\n\t\telse if length(adapters_rep4)<1 then [adapters_rep1,adapters_rep2,adapters_rep3]\n\t\telse if length(adapters_rep5)<1 then [adapters_rep1,adapters_rep2,adapters_rep3,adapters_rep4]\n\t\telse if length(adapters_rep6)<1 then [adapters_rep1,adapters_rep2,adapters_rep3,adapters_rep4,adapters_rep5]\n\t\telse [adapters_rep1,adapters_rep2,adapters_rep3,adapters_rep4,adapters_rep5,adapters_rep6]\n\n\tscatter( i in range(length(fastqs_)) ) {\n\t\t# trim adapters and merge trimmed fastqs\n\t\tcall trim_adapter { input :\n\t\t\tfastqs = fastqs_[i],\n\t\t\tadapters = if length(adapters_)>0 then adapters_[i] else [],\n\t\t\tauto_detect_adapter = auto_detect_adapter,\n\t\t\tpaired_end = paired_end,\n\t\t\tmin_trim_len = cutadapt_min_trim_len,\n\t\t\terr_rate = cutadapt_err_rate,\n\n\t\t\tcpu = trim_adapter_cpu,\n\t\t\tmem_mb = trim_adapter_mem_mb,\n\t\t\ttime_hr = trim_adapter_time_hr,\n\t\t\tdisks = trim_adapter_disks,\n\t\t}\n\t\t# align trimmed/merged fastqs with bowtie2s\n\t\tcall bowtie2 { input :\n\t\t\tidx_tar = bowtie2_idx_tar,\n\t\t\tfastqs = trim_adapter.trimmed_merged_fastqs, #[R1,R2]\n\t\t\tscore_min = bowtie2_score_min,\n\t\t\tpaired_end = paired_end,\n\t\t\tmultimapping = multimapping,\n\n\t\t\tcpu = bowtie2_cpu,\n\t\t\tmem_mb = bowtie2_mem_mb,\n\t\t\ttime_hr = bowtie2_time_hr,\n\t\t\tdisks = bowtie2_disks,\n\t\t}\n\t}\n\n\tArray[File] bams_ = flatten([bowtie2.bam, bams])\n\tscatter( bam in bams_ ) {\n\t\t# filter/dedup bam\n\t\tcall filter { input :\n\t\t\tbam = bam,\n\t\t\tpaired_end = paired_end,\n\t\t\tdup_marker = dup_marker,\n\t\t\tmapq_thresh = mapq_thresh,\n\t\t\tno_dup_removal = no_dup_removal,\n\t\t\tmultimapping = multimapping,\n\n\t\t\tcpu = filter_cpu,\n\t\t\tmem_mb = filter_mem_mb,\n\t\t\ttime_hr = filter_time_hr,\n\t\t\tdisks = filter_disks,\n\t\t}\n\t}\n\n\tArray[File] nodup_bams_ = flatten([filter.nodup_bam, nodup_bams])\n\tscatter( bam in nodup_bams_ ) {\n\t\t# convert bam to tagalign and subsample it if necessary\n\t\tcall bam2ta { input :\n\t\t\tbam = bam,\n\t\t\tdisable_tn5_shift = if pipeline_type=='atac' then false else true,\n\t\t\tregex_grep_v_ta = regex_filter_reads,\n\t\t\tsubsample = subsample_reads,\n\t\t\tpaired_end = paired_end,\n\n\t\t\tcpu = bam2ta_cpu,\n\t\t\tmem_mb = bam2ta_mem_mb,\n\t\t\ttime_hr = bam2ta_time_hr,\n\t\t\tdisks = bam2ta_disks,\t\t\t\n\t\t}\n\t}\n\n\tArray[File] tas_ = if align_only then [] else flatten([bam2ta.ta, tas])\n\tscatter( ta in tas_ ) {\n\t\t# call peaks on tagalign\n\t\tcall macs2 { input :\n\t\t\tta = ta,\n\t\t\tgensz = gensz,\n\t\t\tchrsz = chrsz,\n\t\t\tcap_num_peak = cap_num_peak,\n\t\t\tpval_thresh = pval_thresh,\n\t\t\tsmooth_win = smooth_win,\n\t\t\tmake_signal = true,\n\t\t\tblacklist = blacklist,\n\t\t\tkeep_irregular_chr_in_bfilt_peak = keep_irregular_chr_in_bfilt_peak,\n\n\t\t\tmem_mb = macs2_mem_mb,\n\t\t\tdisks = macs2_disks,\n\t\t\ttime_hr = macs2_time_hr,\n\t\t}\n\t}\n\tif ( length(tas_)>1 ) {\n\t\t# pool tagaligns from true replicates\n\t\tcall pool_ta { input :\n\t\t\ttas = tas_,\n\t\t}\n\t\t# call peaks on pooled replicate\n\t\tcall macs2 as macs2_pooled { input :\n\t\t\tta = pool_ta.ta_pooled,\n\t\t\tgensz = gensz,\n\t\t\tchrsz = chrsz,\n\t\t\tcap_num_peak = cap_num_peak,\n\t\t\tpval_thresh = pval_thresh,\n\t\t\tsmooth_win = smooth_win,\n\t\t\tmake_signal = true,\n\t\t\tblacklist = blacklist,\n\t\t\tkeep_irregular_chr_in_bfilt_peak = keep_irregular_chr_in_bfilt_peak,\n\n\t\t\tmem_mb = macs2_mem_mb,\n\t\t\tdisks = macs2_disks,\n\t\t\ttime_hr = macs2_time_hr,\n\t\t}\n\t}\n\tif ( enable_xcor ) {\n\t\tscatter( ta in tas_ ) {\n\t\t\t# subsample tagalign (non-mito) and cross-correlation analysis\n\t\t\tcall xcor { input :\n\t\t\t\tta = ta,\n\t\t\t\tsubsample = xcor_subsample_reads,\n\t\t\t\tpaired_end = paired_end,\n\n\t\t\t\tcpu = xcor_cpu,\n\t\t\t\tmem_mb = xcor_mem_mb,\n\t\t\t\ttime_hr = xcor_time_hr,\n\t\t\t\tdisks = xcor_disks,\t\t\t\t\n\t\t\t}\n\t\t}\n\t}\n\n\tif ( !true_rep_only ) {\n\t\tscatter( ta in tas_ ) {\n\t\t\t# make two self pseudo replicates per true replicate\n\t\t\tcall spr { input :\n\t\t\t\tta = ta,\n\t\t\t\tpaired_end = paired_end,\n\t\t\t\tmem_mb = spr_mem_mb,\n\t\t\t}\n\t\t\t# call peaks on 1st pseudo replicated tagalign \n\t\t\tcall macs2 as macs2_pr1 { input :\n\t\t\t\tta = spr.ta_pr1,\n\t\t\t\tgensz = gensz,\n\t\t\t\tchrsz = chrsz,\n\t\t\t\tcap_num_peak = cap_num_peak,\n\t\t\t\tpval_thresh = pval_thresh,\n\t\t\t\tsmooth_win = smooth_win,\n\t\t\t\tblacklist = blacklist,\n\t\t\t\tmake_signal = false,\n\t\t\t\tkeep_irregular_chr_in_bfilt_peak = keep_irregular_chr_in_bfilt_peak,\n\n\t\t\t\tmem_mb = macs2_mem_mb,\n\t\t\t\tdisks = macs2_disks,\n\t\t\t\ttime_hr = macs2_time_hr,\n\t\t\t}\n\t\t\t# call peaks on 2nd pseudo replicated tagalign \n\t\t\tcall macs2 as macs2_pr2 { input :\n\t\t\t\tta = spr.ta_pr2,\n\t\t\t\tgensz = gensz,\n\t\t\t\tchrsz = chrsz,\n\t\t\t\tcap_num_peak = cap_num_peak,\n\t\t\t\tpval_thresh = pval_thresh,\n\t\t\t\tsmooth_win = smooth_win,\n\t\t\t\tblacklist = blacklist,\n\t\t\t\tmake_signal = false,\n\t\t\t\tkeep_irregular_chr_in_bfilt_peak = keep_irregular_chr_in_bfilt_peak,\n\n\t\t\t\tmem_mb = macs2_mem_mb,\n\t\t\t\tdisks = macs2_disks,\n\t\t\t\ttime_hr = macs2_time_hr,\n\t\t\t}\n\t\t}\n\t}\n\n\tif ( !true_rep_only && length(tas_)>1 ) {\n\t\t# pool tagaligns from pseudo replicates\n\t\tcall pool_ta as pool_ta_pr1 { input :\n\t\t\ttas = spr.ta_pr1,\n\t\t}\n\t\tcall pool_ta as pool_ta_pr2 { input :\n\t\t\ttas = spr.ta_pr2,\n\t\t}\n\t\t# call peaks on 1st pooled pseudo replicates\n\t\tcall macs2 as macs2_ppr1 { input :\n\t\t\tta = pool_ta_pr1.ta_pooled,\n\t\t\tgensz = gensz,\n\t\t\tchrsz = chrsz,\n\t\t\tcap_num_peak = cap_num_peak,\n\t\t\tpval_thresh = pval_thresh,\n\t\t\tsmooth_win = smooth_win,\n\t\t\tblacklist = blacklist,\n\t\t\tmake_signal = false,\n\t\t\tkeep_irregular_chr_in_bfilt_peak = keep_irregular_chr_in_bfilt_peak,\n\n\t\t\tmem_mb = macs2_mem_mb,\n\t\t\tdisks = macs2_disks,\n\t\t\ttime_hr = macs2_time_hr,\n\t\t}\n\t\t# call peaks on 2nd pooled pseudo replicates\n\t\tcall macs2 as macs2_ppr2 { input :\n\t\t\tta = pool_ta_pr2.ta_pooled,\n\t\t\tgensz = gensz,\n\t\t\tchrsz = chrsz,\n\t\t\tcap_num_peak = cap_num_peak,\n\t\t\tpval_thresh = pval_thresh,\n\t\t\tsmooth_win = smooth_win,\n\t\t\tblacklist = blacklist,\n\t\t\tmake_signal = false,\n\t\t\tkeep_irregular_chr_in_bfilt_peak = keep_irregular_chr_in_bfilt_peak,\n\n\t\t\tmem_mb = macs2_mem_mb,\n\t\t\tdisks = macs2_disks,\n\t\t\ttime_hr = macs2_time_hr,\n\t\t}\n\t}\n\n\t# make peak arrays\n\tArray[File] peaks_ = flatten([macs2.npeak, peaks])\n\n\t# generate all possible pairs of true replicates (pair: left=prefix, right=[peak1,peak2])\n\tArray[Pair[String,Array[File]]] peak_pairs =  \n\t\tif length(peaks_)<=1 then [] # 1 rep\n\t\telse if length(peaks_)<=2 then # 2 reps\n\t\t\t [('rep1-rep2',[peaks_[0],peaks_[1]])]\n\t\telse if length(peaks_)<=3 then # 3 reps\n\t\t\t [('rep1-rep2',[peaks_[0],peaks_[1]]), ('rep1-rep3',[peaks_[0],peaks_[2]]),\n\t\t\t  ('rep2-rep3',[peaks_[1],peaks_[2]])]\n\t\telse if length(peaks_)<=4 then # 4 reps\n\t\t\t [('rep1-rep2',[peaks_[0],peaks_[1]]), ('rep1-rep3',[peaks_[0],peaks_[2]]), ('rep1-rep4',[peaks_[0],peaks_[3]]),\n\t\t\t  ('rep2-rep3',[peaks_[1],peaks_[2]]), ('rep2-rep4',[peaks_[1],peaks_[3]]),\n\t\t\t  ('rep3-rep4',[peaks_[2],peaks_[3]])]\n\t\telse if length(peaks_)<=5 then # 5 reps\n\t\t\t [('rep1-rep2',[peaks_[0],peaks_[1]]), ('rep1-rep3',[peaks_[0],peaks_[2]]), ('rep1-rep4',[peaks_[0],peaks_[3]]), ('rep1-rep5',[peaks_[0],peaks_[4]]),\n\t\t\t  ('rep2-rep3',[peaks_[1],peaks_[2]]), ('rep2-rep4',[peaks_[1],peaks_[3]]), ('rep2-rep5',[peaks_[1],peaks_[4]]),\n\t\t\t  ('rep3-rep4',[peaks_[2],peaks_[3]]), ('rep3-rep5',[peaks_[2],peaks_[4]]),\n\t\t\t  ('rep4-rep5',[peaks_[3],peaks_[4]])]\n\t\telse # 6 reps\n\t\t\t [('rep1-rep2',[peaks_[0],peaks_[1]]), ('rep1-rep3',[peaks_[0],peaks_[2]]), ('rep1-rep4',[peaks_[0],peaks_[3]]), ('rep1-rep5',[peaks_[0],peaks_[4]]), ('rep1-rep6',[peaks_[0],peaks_[5]]),\n\t\t\t  ('rep2-rep3',[peaks_[1],peaks_[2]]), ('rep2-rep4',[peaks_[1],peaks_[3]]), ('rep2-rep5',[peaks_[1],peaks_[4]]), ('rep2-rep6',[peaks_[1],peaks_[5]]),\n\t\t\t  ('rep3-rep4',[peaks_[2],peaks_[3]]), ('rep3-rep5',[peaks_[2],peaks_[4]]), ('rep3-rep6',[peaks_[2],peaks_[5]]),\n\t\t\t  ('rep4-rep5',[peaks_[3],peaks_[4]]), ('rep4-rep6',[peaks_[3],peaks_[5]]),\n\t\t\t  ('rep5-rep6',[peaks_[4],peaks_[5]])]\n\tscatter( pair in peak_pairs ) {\n\t\t# Naive overlap on every pair of true replicates\n\t\tcall overlap { input :\n\t\t\tprefix = pair.left,\n\t\t\tpeak1 = pair.right[0],\n\t\t\tpeak2 = pair.right[1],\n\t\t\tpeak_pooled = select_first([macs2_pooled.npeak, peak_pooled]),\n\t\t\tpeak_type = peak_type,\n\t\t\tblacklist = blacklist,\n\t\t\tchrsz = chrsz,\n\t\t\tkeep_irregular_chr_in_bfilt_peak = keep_irregular_chr_in_bfilt_peak,\n\t\t\tta = pool_ta.ta_pooled,\n\t\t}\n\t}\n\tif ( enable_idr ) {\n\t\tscatter( pair in peak_pairs ) {\n\t\t\t# IDR on every pair of true replicates\n\t\t\tcall idr { input : \n\t\t\t\tprefix = pair.left,\n\t\t\t\tpeak1 = pair.right[0],\n\t\t\t\tpeak2 = pair.right[1],\n\t\t\t\tpeak_pooled = select_first([macs2_pooled.npeak, peak_pooled]),\n\t\t\t\tidr_thresh = idr_thresh,\n\t\t\t\tpeak_type = peak_type,\n\t\t\t\trank = idr_rank,\n\t\t\t\tblacklist = blacklist,\n\t\t\t\tchrsz = chrsz,\n\t\t\t\tkeep_irregular_chr_in_bfilt_peak = keep_irregular_chr_in_bfilt_peak,\n\t\t\t\tta = pool_ta.ta_pooled,\n\t\t\t}\n\t\t}\n\t}\n\n\tArray[File] peaks_pr1_ = select_first([macs2_pr1.npeak, peaks_pr1])\n\tArray[File] peaks_pr2_ = select_first([macs2_pr2.npeak, peaks_pr2])\n\n\tscatter( i in range(length(peaks_pr1_)) ) {\n\t\t# Naive overlap on pseduo replicates\n\t\tcall overlap as overlap_pr { input : \n\t\t\tprefix = \"rep\"+(i+1)+\"-pr\",\n\t\t\tpeak1 = peaks_pr1_[i],\n\t\t\tpeak2 = peaks_pr2_[i],\n\t\t\tpeak_pooled = peaks_[i],\n\t\t\tpeak_type = peak_type,\n\t\t\tblacklist = blacklist,\n\t\t\tchrsz = chrsz,\n\t\t\tkeep_irregular_chr_in_bfilt_peak = keep_irregular_chr_in_bfilt_peak,\n\t\t\tta = if length(tas_)>0 then tas_[i] else pool_ta.ta_pooled,\n\t\t}\n\t}\n\tif ( enable_idr ) {\n\t\tscatter( i in range(length(peaks_pr1_)) ) {\n\t\t\t# IDR on pseduo replicates\n\t\t\tcall idr as idr_pr { input : \n\t\t\t\tprefix = \"rep\"+(i+1)+\"-pr\",\n\t\t\t\tpeak1 = peaks_pr1_[i],\n\t\t\t\tpeak2 = peaks_pr2_[i],\n\t\t\t\tpeak_pooled = peaks_[i],\n\t\t\t\tidr_thresh = idr_thresh,\n\t\t\t\tpeak_type = peak_type,\n\t\t\t\trank = idr_rank,\n\t\t\t\tblacklist = blacklist,\n\t\t\t\tchrsz = chrsz,\n\t\t\t\tkeep_irregular_chr_in_bfilt_peak = keep_irregular_chr_in_bfilt_peak,\n\t\t\t\tta = if length(tas_)>0 then tas_[i] else pool_ta.ta_pooled,\n\t\t\t}\n\t\t}\n\t}\n\tif ( length(peaks_pr1_)>1 ) {\n\t\t# Naive overlap on pooled pseudo replicates\n\t\tcall overlap as overlap_ppr { input : \n\t\t\tprefix = \"ppr\",\n\t\t\tpeak1 = select_first([macs2_ppr1.npeak, peak_ppr1]),\n\t\t\tpeak2 = select_first([macs2_ppr2.npeak, peak_ppr2]),\n\t\t\tpeak_pooled = select_first([macs2_pooled.npeak, peak_pooled]),\n\t\t\tpeak_type = peak_type,\n\t\t\tblacklist = blacklist,\n\t\t\tchrsz = chrsz,\n\t\t\tkeep_irregular_chr_in_bfilt_peak = keep_irregular_chr_in_bfilt_peak,\n\t\t\tta = pool_ta.ta_pooled,\n\t\t}\n\t}\n\tif ( enable_idr && length(peaks_pr1_)>1  ) {\n\t\t# IDR on pooled pseduo replicates\n\t\tcall idr as idr_ppr { input : \n\t\t\tprefix = \"ppr\",\n\t\t\tpeak1 = select_first([macs2_ppr1.npeak, peak_ppr1]),\n\t\t\tpeak2 = select_first([macs2_ppr2.npeak, peak_ppr2]),\n\t\t\tpeak_pooled = select_first([macs2_pooled.npeak, peak_pooled]),\n\t\t\tidr_thresh = idr_thresh,\n\t\t\tpeak_type = peak_type,\n\t\t\trank = idr_rank,\n\t\t\tblacklist = blacklist,\n\t\t\tchrsz = chrsz,\n\t\t\tkeep_irregular_chr_in_bfilt_peak = keep_irregular_chr_in_bfilt_peak,\n\t\t\tta = pool_ta.ta_pooled,\n\t\t}\n\t}\n\tif ( !align_only && !true_rep_only ) {\n\t\t# reproducibility QC for overlapping peaks\n\t\tcall reproducibility as reproducibility_overlap { input :\n\t\t\tprefix = 'overlap',\n\t\t\tpeaks = overlap.bfilt_overlap_peak,\n\t\t\tpeaks_pr = overlap_pr.bfilt_overlap_peak,\n\t\t\tpeak_ppr = overlap_ppr.bfilt_overlap_peak,\n\t\t\tpeak_type = peak_type,\n\t\t\tchrsz = chrsz,\n\t\t\tkeep_irregular_chr_in_bfilt_peak = keep_irregular_chr_in_bfilt_peak,\n\t\t}\n\t}\n\tif ( !align_only && !true_rep_only && enable_idr ) {\n\t\t# reproducibility QC for IDR peaks\n\t\tcall reproducibility as reproducibility_idr { input :\n\t\t\tprefix = 'idr',\n\t\t\tpeaks = idr.bfilt_idr_peak,\n\t\t\tpeaks_pr = idr_pr.bfilt_idr_peak,\n\t\t\tpeak_ppr = idr_ppr.bfilt_idr_peak,\n\t\t\tpeak_type = peak_type,\n\t\t\tchrsz = chrsz,\n\t\t\tkeep_irregular_chr_in_bfilt_peak = keep_irregular_chr_in_bfilt_peak,\n\t\t}\n\t}\n\n\t# ATAQC is available only when pipeline starts from fastqs, take fastqs[] as base array for ataqc\n\tArray[Array[Array[File]]] fastqs_ataqc = \n\t\tif basename(tss_enrich)=='null' || disable_ataqc || align_only || true_rep_only then [] else fastqs_\n\n\tscatter( i in range(length(fastqs_ataqc)) ) {\n\t\tcall ataqc { input : \n\t\t\tpaired_end = paired_end,\n\t\t\tread_len_log = bowtie2.read_len_log[i],\n\t\t\tflagstat_log = bowtie2.flagstat_qc[i],\n\t\t\tbowtie2_log = bowtie2.align_log[i],\n\t\t\tpbc_log = filter.pbc_qc[i],\n\t\t\tdup_log = filter.dup_qc[i],\n\t\t\tbam = bams_[i],\n\t\t\tnodup_flagstat_log = filter.flagstat_qc[i],\n\t\t\tmito_dup_log = filter.mito_dup_log[i],\n\t\t\tnodup_bam = nodup_bams_[i],\n\t\t\tta = tas_[i],\n\t\t\tpeak = if enable_idr then select_first([idr_pr.bfilt_idr_peak])[i]\n\t\t\t\t\telse reproducibility_overlap.optimal_peak,\n\t\t\tidr_peak = reproducibility_idr.optimal_peak, #idr_peaks_ataqc[i],\n\t\t\toverlap_peak= reproducibility_overlap.optimal_peak, #overlap_peaks_ataqc[i],\n\t\t\tbigwig = macs2.sig_pval[i],\n\t\t\tref_fa = ref_fa,\n\t\t\tchrsz = chrsz,\n\t\t\ttss_enrich = tss_enrich,\n\t\t\tblacklist = blacklist,\n\t\t\tdnase = dnase,\n\t\t\tprom = prom,\n\t\t\tenh = enh,\n\t\t\treg2map_bed = reg2map_bed,\n\t\t\treg2map = reg2map,\n\t\t\troadmap_meta = roadmap_meta,\n\n\t\t\tmem_mb = ataqc_mem_mb,\n\t\t\tmem_java_mb = ataqc_mem_java_mb,\n\t\t\ttime_hr = ataqc_time_hr,\n\t\t\tdisks = ataqc_disks,\n\t\t}\n\t}\n\n\t# Generate final QC report and JSON\t\t\n\tcall qc_report { input :\n\t\ttitle = title,\n\t\tdescription = description,\n\t\tmultimapping = multimapping,\n\t\tpaired_end = paired_end,\n\t\tpipeline_type = pipeline_type,\n\t\tpeak_caller = 'macs2',\n\t\tmacs2_cap_num_peak = cap_num_peak,\n\t\tidr_thresh = idr_thresh,\n\t\tflagstat_qcs = bowtie2.flagstat_qc,\n\t\tnodup_flagstat_qcs = filter.flagstat_qc,\n\t\tdup_qcs = filter.dup_qc,\n\t\tpbc_qcs = filter.pbc_qc,\n\t\txcor_plots = xcor.plot_png,\n\t\txcor_scores = xcor.score,\n\n\t\tfrip_macs2_qcs = macs2.frip_qc,\n\t\tfrip_macs2_qcs_pr1 = macs2_pr1.frip_qc,\n\t\tfrip_macs2_qcs_pr2 = macs2_pr2.frip_qc,\n\t\tfrip_macs2_qc_pooled = macs2_pooled.frip_qc,\n\t\tfrip_macs2_qc_ppr1 = macs2_ppr1.frip_qc,\n\t\tfrip_macs2_qc_ppr2 = macs2_ppr2.frip_qc,\n\n\t\tidr_plots = idr.idr_plot,\n\t\tidr_plots_pr = idr_pr.idr_plot,\n\t\tidr_plot_ppr = idr_ppr.idr_plot,\n\t\tfrip_idr_qcs = idr.frip_qc,\n\t\tfrip_idr_qcs_pr = idr_pr.frip_qc,\n\t\tfrip_idr_qc_ppr = idr_ppr.frip_qc,\n\t\tfrip_overlap_qcs = overlap.frip_qc,\n\t\tfrip_overlap_qcs_pr = overlap_pr.frip_qc,\n\t\tfrip_overlap_qc_ppr = overlap_ppr.frip_qc,\n\t\tidr_reproducibility_qc = reproducibility_idr.reproducibility_qc,\n\t\toverlap_reproducibility_qc = reproducibility_overlap.reproducibility_qc,\n\t\tataqc_txts = ataqc.txt,\n\t\tataqc_htmls = ataqc.html,\n\t}\n\n\toutput {\n\t\tFile report = qc_report.report\n\t\tFile qc_json = qc_report.qc_json\n\t\tBoolean qc_json_match = qc_report.qc_json_match\n\t}\n}\n\ntask trim_adapter { # trim adapters and merge trimmed fastqs\n\tArray[Array[File]] fastqs \t\t# [merge_id][read_end_id]\n\tArray[Array[String]] adapters \t# [merge_id][read_end_id]\n\tBoolean paired_end\n\t# mandatory\n\tBoolean auto_detect_adapter\t# automatically detect/trim adapters\n\t# optional\n\tInt min_trim_len \t\t# minimum trim length for cutadapt -m\n\tFloat err_rate\t\t\t# Maximum allowed adapter error rate \n\t\t\t\t\t\t\t# for cutadapt -e\t\n\tInt cpu\n\tInt mem_mb\n\tInt time_hr\n\tString disks\n\n\tcommand {\n\t\tpython $(which encode_trim_adapter.py) \\\n\t\t\t${write_tsv(fastqs)} \\\n\t\t\t--adapters ${write_tsv(adapters)} \\\n\t\t\t${if paired_end then \"--paired-end\" else \"\"} \\\n\t\t\t${if auto_detect_adapter then \"--auto-detect-adapter\" else \"\"} \\\n\t\t\t${\"--min-trim-len \" + min_trim_len} \\\n\t\t\t${\"--err-rate \" + err_rate} \\\n\t\t\t${\"--nth \" + cpu}\n\t}\n\toutput {\n\t\t# WDL glob() globs in an alphabetical order\n\t\t# so R1 and R2 can be switched, which results in an\n\t\t# unexpected behavior of a workflow\n\t\t# so we prepend merge_fastqs_'end'_ (R1 or R2)\n\t\t# to the basename of original filename\n\t\t# this prefix will be later stripped in bowtie2 task\n\t\tArray[File] trimmed_merged_fastqs = glob(\"merge_fastqs_R?_*.fastq.gz\")\n\t}\n\truntime {\n\t\tcpu : cpu\n\t\tmemory : \"${mem_mb} MB\"\n\t\ttime : time_hr\n\t\tdisks : disks\n\t}\n}\n\ntask bowtie2 {\n\tFile idx_tar \t\t# reference bowtie2 index tar\n\tArray[File] fastqs \t# [read_end_id]\n\tBoolean paired_end\n\tInt multimapping\n\tString score_min \t# min acceptable alignment score func\n\t\t\t\t\t\t# w.r.t read length\n\tInt cpu\n\tInt mem_mb\n\tInt time_hr\n\tString disks\n\n\tcommand {\n\t\tpython $(which encode_bowtie2.py) \\\n\t\t\t${idx_tar} \\\n\t\t\t${sep=' ' fastqs} \\\n\t\t\t${if paired_end then \"--paired-end\" else \"\"} \\\n\t\t\t${\"--multimapping \" + multimapping} \\\n\t\t\t${if score_min!=\"\" then \"--score-min \" + score_min else \"\"} \\\n\t\t\t${\"--nth \" + cpu}\n\t}\n\toutput {\n\t\tFile bam = glob(\"*.bam\")[0]\n\t\tFile bai = glob(\"*.bai\")[0]\n\t\tFile align_log = glob(\"*.align.log\")[0]\n\t\tFile flagstat_qc = glob(\"*.flagstat.qc\")[0]\n\t\tFile read_len_log = glob(\"*.read_length.txt\")[0] # read_len\n\t}\n\truntime {\n\t\tcpu : cpu\n\t\tmemory : \"${mem_mb} MB\"\n\t\ttime : time_hr\n\t\tdisks : disks\n\t\tpreemptible: 0\n\t}\n}\n\ntask filter {\n\tFile bam\n\tBoolean paired_end\n\tInt multimapping\n\tString dup_marker \t\t\t# picard.jar MarkDuplicates (picard) or \n\t\t\t\t\t\t\t\t# sambamba markdup (sambamba)\n\tInt mapq_thresh\t\t\t\t# threshold for low MAPQ reads removal\n\tBoolean no_dup_removal \t\t# no dupe reads removal when filtering BAM\n\t\t\t\t\t\t\t\t# dup.qc and pbc.qc will be empty files\n\t\t\t\t\t\t\t\t# and nodup_bam in the output is \n\t\t\t\t\t\t\t\t# filtered bam with dupes\t\n\tInt cpu\n\tInt mem_mb\n\tInt time_hr\n\tString disks\n\n\tcommand {\n\t\tpython $(which encode_filter.py) \\\n\t\t\t${bam} \\\n\t\t\t${if paired_end then \"--paired-end\" else \"\"} \\\n\t\t\t${\"--multimapping \" + multimapping} \\\n\t\t\t${\"--dup-marker \" + dup_marker} \\\n\t\t\t${\"--mapq-thresh \" + mapq_thresh} \\\n\t\t\t${if no_dup_removal then \"--no-dup-removal\" else \"\"} \\\n\t\t\t${\"--nth \" + cpu}\n\t\t# ugly part to deal with optional outputs with Google JES backend\n\t\t${if no_dup_removal then \"touch null.dup.qc null.pbc.qc null.mito_dup.txt; \" else \"\"}\n\t\ttouch null\n\t}\n\toutput {\n\t\tFile nodup_bam = glob(\"*.bam\")[0]\n\t\tFile nodup_bai = glob(\"*.bai\")[0]\n\t\tFile flagstat_qc = glob(\"*.flagstat.qc\")[0]\n\t\tFile dup_qc = if no_dup_removal then glob(\"null\")[0] else glob(\"*.dup.qc\")[0]\n\t\tFile pbc_qc = if no_dup_removal then glob(\"null\")[0] else glob(\"*.pbc.qc\")[0]\n\t\tFile mito_dup_log = if no_dup_removal then glob(\"null\")[0] else glob(\"*.mito_dup.txt\")[0] # mito_dups, fract_dups_from_mito\n\t}\n\truntime {\n\t\tcpu : cpu\n\t\tmemory : \"${mem_mb} MB\"\n\t\ttime : time_hr\n\t\tdisks : disks\n\t}\n}\n\ntask bam2ta {\n\tFile bam\n\tBoolean paired_end\n\tBoolean disable_tn5_shift \t# no tn5 shifting (it's for dnase-seq)\n\tString regex_grep_v_ta   \t# Perl-style regular expression pattern \n                        \t\t# to remove matching reads from TAGALIGN\n\tInt subsample \t\t\t\t# number of reads to subsample TAGALIGN\n\t\t\t\t\t\t\t\t# this affects all downstream analysis\n\tInt cpu\n\tInt mem_mb\n\tInt time_hr\n\tString disks\n\n\tcommand {\n\t\tpython $(which encode_bam2ta.py) \\\n\t\t\t${bam} \\\n\t\t\t${if paired_end then \"--paired-end\" else \"\"} \\\n\t\t\t${if disable_tn5_shift then \"--disable-tn5-shift\" else \"\"} \\\n\t\t\t${if regex_grep_v_ta!=\"\" then \"--regex-grep-v-ta '\"+regex_grep_v_ta+\"'\" else \"\"} \\\n\t\t\t${\"--subsample \" + subsample} \\\n\t\t\t${\"--nth \" + cpu}\n\t}\n\toutput {\n\t\tFile ta = glob(\"*.tagAlign.gz\")[0]\n\t}\n\truntime {\n\t\tcpu : cpu\n\t\tmemory : \"${mem_mb} MB\"\n\t\ttime : time_hr\n\t\tdisks : disks\n\t}\n}\n\ntask spr { # make two self pseudo replicates\n\tFile ta\n\tBoolean paired_end\n\n\tInt mem_mb\n\n\tcommand {\n\t\tpython $(which encode_spr.py) \\\n\t\t\t${ta} \\\n\t\t\t${if paired_end then \"--paired-end\" else \"\"}\n\t}\n\toutput {\n\t\tFile ta_pr1 = glob(\"*.pr1.tagAlign.gz\")[0]\n\t\tFile ta_pr2 = glob(\"*.pr2.tagAlign.gz\")[0]\n\t}\n\truntime {\n\t\tcpu : 1\n\t\tmemory : \"${mem_mb} MB\"\n\t\ttime : 1\n\t\tdisks : \"local-disk 50 HDD\"\n\t}\n}\n\ntask pool_ta {\n\tArray[File] tas\n\n\tcommand {\n\t\tpython $(which encode_pool_ta.py) \\\n\t\t\t${sep=' ' tas}\n\t}\n\toutput {\n\t\tFile ta_pooled = glob(\"*.tagAlign.gz\")[0]\n\t}\n\truntime {\n\t\tcpu : 1\n\t\tmemory : \"4000 MB\"\n\t\ttime : 1\n\t\tdisks : \"local-disk 50 HDD\"\n\t}\n}\n\ntask xcor {\n\tFile ta\n\tBoolean paired_end\n\tInt subsample  # number of reads to subsample TAGALIGN\n\t\t\t\t# this will be used for xcor only\n\t\t\t\t# will not affect any downstream analysis\n\tInt cpu\n\tInt mem_mb\t\n\tInt time_hr\n\tString disks\n\n\tcommand {\n\t\tpython $(which encode_xcor.py) \\\n\t\t\t${ta} \\\n\t\t\t${if paired_end then \"--paired-end\" else \"\"} \\\n\t\t\t${\"--subsample \" + subsample} \\\n\t\t\t--speak=0 \\\n\t\t\t${\"--nth \" + cpu}\n\t}\n\toutput {\n\t\tFile plot_pdf = glob(\"*.cc.plot.pdf\")[0]\n\t\tFile plot_png = glob(\"*.cc.plot.png\")[0]\n\t\tFile score = glob(\"*.cc.qc\")[0]\n\t\tInt fraglen = read_int(glob(\"*.cc.fraglen.txt\")[0])\n\t}\n\truntime {\n\t\tcpu : cpu\n\t\tmemory : \"${mem_mb} MB\"\n\t\ttime : time_hr\n\t\tdisks : disks\n\t}\n}\n\ntask macs2 {\n\tFile ta\n\tString gensz\t\t# Genome size (sum of entries in 2nd column of \n                        # chr. sizes file, or hs for human, ms for mouse)\n\tFile chrsz\t\t\t# 2-col chromosome sizes file\n\tInt cap_num_peak\t# cap number of raw peaks called from MACS2\n\tFloat pval_thresh  \t# p.value threshold\n\tInt smooth_win \t\t# size of smoothing window\n\tBoolean make_signal\n\tFile blacklist \t\t# blacklist BED to filter raw peaks\n\tBoolean\tkeep_irregular_chr_in_bfilt_peak\n\t\n\tInt mem_mb\n\tInt time_hr\n\tString disks\n\n\tcommand {\n\t\tpython $(which encode_macs2_atac.py) \\\n\t\t\t${ta} \\\n\t\t\t${\"--gensz \"+ gensz} \\\n\t\t\t${\"--chrsz \" + chrsz} \\\n\t\t\t${\"--cap-num-peak \" + cap_num_peak} \\\n\t\t\t${\"--pval-thresh \"+ pval_thresh} \\\n\t\t\t${\"--smooth-win \"+ smooth_win} \\\n\t\t\t${if make_signal then \"--make-signal\" else \"\"} \\\n\t\t\t${if keep_irregular_chr_in_bfilt_peak then \"--keep-irregular-chr\" else \"\"} \\\n\t\t\t${\"--blacklist \"+ blacklist}\n\t\t\n\t\t# ugly part to deal with optional outputs with Google JES backend\n\t\t${if make_signal then \"\" \n\t\t\telse \"touch null.pval.signal.bigwig null.fc.signal.bigwig\"}\n\t\ttouch null \n\t}\n\toutput {\n\t\tFile npeak = glob(\"*[!.][!b][!f][!i][!l][!t].narrowPeak.gz\")[0]\n\t\tFile bfilt_npeak = glob(\"*.bfilt.narrowPeak.gz\")[0]\n\t\tFile bfilt_npeak_bb = glob(\"*.bfilt.narrowPeak.bb\")[0]\n\t\tArray[File] bfilt_npeak_hammock = glob(\"*.bfilt.narrowPeak.hammock.gz*\")\n\t\tFile sig_pval = if make_signal then glob(\"*.pval.signal.bigwig\")[0] else glob(\"null\")[0]\n\t\tFile sig_fc = if make_signal then glob(\"*.fc.signal.bigwig\")[0] else glob(\"null\")[0]\n\t\tFile frip_qc = glob(\"*.frip.qc\")[0]\n\t}\n\truntime {\n\t\tcpu : 1\n\t\tmemory : \"${mem_mb} MB\"\n\t\ttime : time_hr\n\t\tdisks : disks\n\t}\n}\n\ntask idr {\n\tString prefix \t\t# prefix for IDR output file\n\tFile peak1 \t\t\t\n\tFile peak2\n\tFile peak_pooled\n\tFloat idr_thresh\n\tFile blacklist \t# blacklist BED to filter raw peaks\n\tBoolean\tkeep_irregular_chr_in_bfilt_peak\n\t# parameters to compute FRiP\n\tFile? ta\t\t# to calculate FRiP\n\tFile chrsz\t\t\t# 2-col chromosome sizes file\n\tString peak_type\n\tString rank\n\n\tcommand {\n\t\tpython $(which encode_idr.py) \\\n\t\t\t${peak1} ${peak2} ${peak_pooled} \\\n\t\t\t${\"--prefix \" + prefix} \\\n\t\t\t${\"--idr-thresh \" + idr_thresh} \\\n\t\t\t${\"--peak-type \" + peak_type} \\\n\t\t\t--idr-rank ${rank} \\\n\t\t\t${\"--chrsz \" + chrsz} \\\n\t\t\t${\"--blacklist \"+ blacklist} \\\n\t\t\t${if keep_irregular_chr_in_bfilt_peak then \"--keep-irregular-chr\" else \"\"} \\\n\t\t\t${\"--ta \" + ta}\n\n\t\t# ugly part to deal with optional outputs with Google backend\n\t\t${if defined(ta) then \"\" else \"touch null.frip.qc\"}\n\t\ttouch null \n\t}\n\toutput {\n\t\tFile idr_peak = glob(\"*[!.][!b][!f][!i][!l][!t].\"+peak_type+\".gz\")[0]\n\t\tFile bfilt_idr_peak = glob(\"*.bfilt.\"+peak_type+\".gz\")[0]\n\t\tFile bfilt_idr_peak_bb = glob(\"*.bfilt.\"+peak_type+\".bb\")[0]\n\t\tArray[File] bfilt_idr_peak_hammock = glob(\"*.bfilt.\"+peak_type+\".hammock.gz*\")\n\t\tFile idr_plot = glob(\"*.txt.png\")[0]\n\t\tFile idr_unthresholded_peak = glob(\"*.txt.gz\")[0]\n\t\tFile idr_log = glob(\"*.log\")[0]\n\t\tFile frip_qc = if defined(ta) then glob(\"*.frip.qc\")[0] else glob(\"null\")[0]\n\t}\n\truntime {\n\t\tcpu : 1\n\t\tmemory : \"8000 MB\"\n\t\ttime : 1\n\t\tdisks : \"local-disk 50 HDD\"\n\t}\t\n}\n\ntask overlap {\n\tString prefix \t\t# prefix for IDR output file\n\tFile peak1\n\tFile peak2\n\tFile peak_pooled\n\tFile blacklist \t# blacklist BED to filter raw peaks\n\tBoolean\tkeep_irregular_chr_in_bfilt_peak\n\tFile? ta\t\t# to calculate FRiP\n\tFile chrsz\t\t\t# 2-col chromosome sizes file\n\tString peak_type\n\n\tcommand {\n\t\tpython $(which encode_naive_overlap.py) \\\n\t\t\t${peak1} ${peak2} ${peak_pooled} \\\n\t\t\t${\"--prefix \" + prefix} \\\n\t\t\t${\"--peak-type \" + peak_type} \\\n\t\t\t${\"--chrsz \" + chrsz} \\\n\t\t\t${\"--blacklist \"+ blacklist} \\\n\t\t\t--nonamecheck \\\n\t\t\t${if keep_irregular_chr_in_bfilt_peak then \"--keep-irregular-chr\" else \"\"} \\\n\t\t\t${\"--ta \" + ta}\n\n\t\t# ugly part to deal with optional outputs with Google backend\n\t\t${if defined(ta) then \"\" else \"touch null.frip.qc\"}\n\t\ttouch null \n\t}\n\toutput {\n\t\tFile overlap_peak = glob(\"*[!.][!b][!f][!i][!l][!t].\"+peak_type+\".gz\")[0]\n\t\tFile bfilt_overlap_peak = glob(\"*.bfilt.\"+peak_type+\".gz\")[0]\n\t\tFile bfilt_overlap_peak_bb = glob(\"*.bfilt.\"+peak_type+\".bb\")[0]\n\t\tArray[File] bfilt_overlap_peak_hammock = glob(\"*.bfilt.\"+peak_type+\".hammock.gz*\")\n\t\tFile frip_qc = if defined(ta) then glob(\"*.frip.qc\")[0] else glob(\"null\")[0]\n\t}\n\truntime {\n\t\tcpu : 1\n\t\tmemory : \"4000 MB\"\n\t\ttime : 1\n\t\tdisks : \"local-disk 50 HDD\"\n\t}\n}\n\ntask reproducibility {\n\tString prefix\n\tArray[File]? peaks # peak files from pair of true replicates\n\t\t\t\t\t\t# in a sorted order. for example of 4 replicates,\n\t\t\t\t\t\t# 1,2 1,3 1,4 2,3 2,4 3,4.\n                        # x,y means peak file from rep-x vs rep-y\n\tArray[File]? peaks_pr\t# peak files from pseudo replicates\n\tFile? peak_ppr\t\t\t# Peak file from pooled pseudo replicate.\n\tString peak_type\n\tFile chrsz\t\t\t# 2-col chromosome sizes file\n\tBoolean\tkeep_irregular_chr_in_bfilt_peak\n\n\tcommand {\n\t\tpython $(which encode_reproducibility_qc.py) \\\n\t\t\t${sep=' ' peaks} \\\n\t\t\t--peaks-pr ${sep=' ' peaks_pr} \\\n\t\t\t${\"--peak-ppr \"+ peak_ppr} \\\n\t\t\t--prefix ${prefix} \\\n\t\t\t${\"--peak-type \" + peak_type} \\\n\t\t\t${if keep_irregular_chr_in_bfilt_peak then \"--keep-irregular-chr\" else \"\"} \\\n\t\t\t${\"--chrsz \" + chrsz}\n\t}\n\toutput {\n\t\tFile optimal_peak = glob(\"optimal_peak.*.gz\")[0]\n\t\tFile conservative_peak = glob(\"conservative_peak.*.gz\")[0]\n\t\tFile optimal_peak_bb = glob(\"optimal_peak.*.bb\")[0]\n\t\tFile conservative_peak_bb = glob(\"conservative_peak.*.bb\")[0]\n\t\tArray[File] optimal_peak_hammock = glob(\"optimal_peak.*.hammock.gz*\")\n\t\tArray[File] conservative_peak_hammock = glob(\"conservative_peak.*.hammock_gz*\")\n\t\tFile reproducibility_qc = glob(\"*reproducibility.qc\")[0]\n\t}\n\truntime {\n\t\tcpu : 1\n\t\tmemory : \"4000 MB\"\n\t\ttime : 1\n\t\tdisks : \"local-disk 50 HDD\"\n\t}\n}\n\ntask ataqc { # generate ATAQC report\n\tBoolean paired_end\n\tFile read_len_log\n\tFile flagstat_log\n\tFile bowtie2_log\n\tFile bam\n\tFile nodup_flagstat_log\n\tFile mito_dup_log\n\tFile dup_log\n\tFile pbc_log\n\tFile nodup_bam\n\tFile ta\n\tFile? peak\n\tFile? idr_peak \n\tFile? overlap_peak\n\tFile bigwig\n\t# from genome database\n\tFile ref_fa\n\tFile chrsz\n\tFile tss_enrich\n\tFile blacklist\n\tFile dnase\n\tFile prom\n\tFile enh\n\tFile reg2map_bed\n\tFile reg2map\n\tFile roadmap_meta\n\n\tInt mem_mb\n\tInt mem_java_mb\n\tInt time_hr\n\tString disks\n\n\tcommand {\n\t\texport _JAVA_OPTIONS=\"-Xms256M -Xmx${mem_java_mb}M -XX:ParallelGCThreads=1\"\n\n\t\tpython $(which encode_ataqc.py) \\\n\t\t\t${if paired_end then \"--paired-end\" else \"\"} \\\n\t\t\t--read-len-log ${read_len_log} \\\n\t\t\t--flagstat-log ${flagstat_log} \\\n\t\t\t--bowtie2-log ${bowtie2_log} \\\n\t\t\t--bam ${bam} \\\n\t\t\t--nodup-flagstat-log ${nodup_flagstat_log} \\\n\t\t\t--mito-dup-log ${mito_dup_log} \\\n\t\t\t--dup-log ${dup_log} \\\n\t\t\t--pbc-log ${pbc_log} \\\n\t\t\t--nodup-bam ${nodup_bam} \\\n\t\t\t--ta ${ta} \\\n\t\t\t--bigwig ${bigwig} \\\n\t\t\t${\"--peak \" + peak} \\\n\t\t\t${\"--idr-peak \" + idr_peak} \\\n\t\t\t${\"--overlap-peak \" + overlap_peak} \\\n\t\t\t--ref-fa ${ref_fa} \\\n\t\t\t--blacklist ${blacklist} \\\n\t\t\t--chrsz ${chrsz} \\\n\t\t\t--dnase ${dnase} \\\n\t\t\t--tss-enrich ${tss_enrich} \\\n\t\t\t--prom ${prom} \\\n\t\t\t--enh ${enh} \\\n\t\t\t--reg2map-bed ${reg2map_bed} \\\n\t\t\t--reg2map ${reg2map} \\\n\t\t\t--roadmap-meta ${roadmap_meta}\n\t}\n\toutput {\n\t\tFile html = glob(\"*_qc.html\")[0]\n\t\tFile txt = glob(\"*_qc.txt\")[0]\n\t}\n\truntime {\n\t\tcpu : 1\n\t\tmemory : \"${mem_mb} MB\"\n\t\ttime : time_hr\n\t\tdisks : disks\n\t}\n}\n\n# gather all outputs and generate \n# - qc.html\t\t: organized final HTML report\n# - qc.json\t\t: all QCs\ntask qc_report {\n\t# optional metadata\n \tString title # name of sample\n\tString description # description for sample\n\t#String? encode_accession_id\t# ENCODE accession ID of sample\n\t# workflow params\n\tInt multimapping\n\tBoolean paired_end\n\tString pipeline_type\n\tString peak_caller\n\tInt? macs2_cap_num_peak\n\tInt? spp_cap_num_peak\n\tFloat idr_thresh\n\t# QCs\n\tArray[File]? flagstat_qcs\n\tArray[File]? nodup_flagstat_qcs\n\tArray[File]? dup_qcs\n\tArray[File]? pbc_qcs\n\tArray[File]? xcor_plots\n\tArray[File]? xcor_scores\n\tArray[File]? idr_plots\n\tArray[File]? idr_plots_pr\n\tFile? idr_plot_ppr\n\tArray[File]? frip_macs2_qcs\n\tArray[File]? frip_macs2_qcs_pr1\n\tArray[File]? frip_macs2_qcs_pr2\n\tFile? frip_macs2_qc_pooled\n\tFile? frip_macs2_qc_ppr1 \n\tFile? frip_macs2_qc_ppr2 \n\tArray[File]? frip_idr_qcs\n\tArray[File]? frip_idr_qcs_pr\n\tFile? frip_idr_qc_ppr \n\tArray[File]? frip_overlap_qcs\n\tArray[File]? frip_overlap_qcs_pr\n\tFile? frip_overlap_qc_ppr\n\tFile? idr_reproducibility_qc\n\tFile? overlap_reproducibility_qc\n\tArray[File]? ataqc_txts\n\tArray[File]? ataqc_htmls\n\n\tFile? qc_json_ref\n\n\tcommand {\n\t\tpython $(which encode_qc_report.py) \\\n\t\t\t${\"--name '\" + sub(title,\"'\",\"_\") + \"'\"} \\\n\t\t\t${\"--desc '\" + sub(description,\"'\",\"_\") + \"'\"} \\\n\t\t\t${\"--multimapping \" + multimapping} \\\n\t\t\t${if paired_end then \"--paired-end\" else \"\"} \\\n\t\t\t--pipeline-type ${pipeline_type} \\\n\t\t\t--peak-caller ${peak_caller} \\\n\t\t\t${\"--macs2-cap-num-peak \" + macs2_cap_num_peak} \\\n\t\t\t${\"--spp-cap-num-peak \" + spp_cap_num_peak} \\\n\t\t\t--idr-thresh ${idr_thresh} \\\n\t\t\t--flagstat-qcs ${sep=' ' flagstat_qcs} \\\n\t\t\t--nodup-flagstat-qcs ${sep=' ' nodup_flagstat_qcs} \\\n\t\t\t--dup-qcs ${sep=' ' dup_qcs} \\\n\t\t\t--pbc-qcs ${sep=' ' pbc_qcs} \\\n\t\t\t--xcor-plots ${sep=' ' xcor_plots} \\\n\t\t\t--xcor-scores ${sep=' ' xcor_scores} \\\n\t\t\t--idr-plots ${sep=' ' idr_plots} \\\n\t\t\t--idr-plots-pr ${sep=' ' idr_plots_pr} \\\n\t\t\t${\"--idr-plot-ppr \" + idr_plot_ppr} \\\n\t\t\t--frip-macs2-qcs ${sep=' ' frip_macs2_qcs} \\\n\t\t\t--frip-macs2-qcs-pr1 ${sep=' ' frip_macs2_qcs_pr1} \\\n\t\t\t--frip-macs2-qcs-pr2 ${sep=' ' frip_macs2_qcs_pr2} \\\n\t\t\t${\"--frip-macs2-qc-pooled \" + frip_macs2_qc_pooled} \\\n\t\t\t${\"--frip-macs2-qc-ppr1 \" + frip_macs2_qc_ppr1} \\\n\t\t\t${\"--frip-macs2-qc-ppr2 \" + frip_macs2_qc_ppr2} \\\n\t\t\t--frip-idr-qcs ${sep=' ' frip_idr_qcs} \\\n\t\t\t--frip-idr-qcs-pr ${sep=' ' frip_idr_qcs_pr} \\\n\t\t\t${\"--frip-idr-qc-ppr \" + frip_idr_qc_ppr} \\\n\t\t\t--frip-overlap-qcs ${sep=' ' frip_overlap_qcs} \\\n\t\t\t--frip-overlap-qcs-pr ${sep=' ' frip_overlap_qcs_pr} \\\n\t\t\t${\"--frip-overlap-qc-ppr \" + frip_overlap_qc_ppr} \\\n\t\t\t${\"--idr-reproducibility-qc \" + idr_reproducibility_qc} \\\n\t\t\t${\"--overlap-reproducibility-qc \" + overlap_reproducibility_qc} \\\n\t\t\t--ataqc-txts ${sep=' ' ataqc_txts} \\\n\t\t\t--ataqc-htmls ${sep=' ' ataqc_htmls} \\\n\t\t\t--out-qc-html qc.html \\\n\t\t\t--out-qc-json qc.json\n\t\t\n\t\tdiff qc.json ${if defined(qc_json_ref) then qc_json_ref else \"/dev/null\"} | wc -l > qc_json_match.txt\n\t}\n\toutput {\n\t\tFile report = glob('*qc.html')[0]\n\t\tFile qc_json = glob('*qc.json')[0]\n\t\tBoolean qc_json_match = read_int(\"qc_json_match.txt\")==0\n\t}\n\truntime {\n\t\tcpu : 1\n\t\tmemory : \"4000 MB\"\n\t\ttime : 1\n\t\tdisks : \"local-disk 50 HDD\"\t\t\n\t}\n}\n\ntask read_genome_tsv {\n\tFile genome_tsv\n\tcommand {\n\t\tcat ${genome_tsv} > 'tmp.tsv'\n\t}\n\toutput {\n\t\tMap[String,String] genome = read_map('tmp.tsv')\n\t}\n\truntime {\n\t\tcpu : 1\n\t\tmemory : \"4000 MB\"\n\t\ttime : 1\n\t\tdisks : \"local-disk 50 HDD\"\t\t\n\t}\n}\n\ntask compare_md5sum {\n\tArray[String] labels\n\tArray[File] files\n\tArray[File] ref_files\n\n\tcommand <<<\n\t\tpython <<CODE\t\n\t\tfrom collections import OrderedDict\n\t\timport os\n\t\timport json\n\t\timport hashlib\n\n\t\tdef md5sum(filename, blocksize=65536):\n\t\t    hash = hashlib.md5()\n\t\t    with open(filename, 'rb') as f:\n\t\t        for block in iter(lambda: f.read(blocksize), b\"\"):\n\t\t            hash.update(block)\n\t\t    return hash.hexdigest()\n\n\t\twith open('${write_lines(labels)}','r') as fp:\n\t\t\tlabels = fp.read().splitlines()\n\t\twith open('${write_lines(files)}','r') as fp:\n\t\t\tfiles = fp.read().splitlines()\n\t\twith open('${write_lines(ref_files)}','r') as fp:\n\t\t\tref_files = fp.read().splitlines()\n\n\t\tresult = OrderedDict()\n\t\tmatch = OrderedDict()\n\t\tmatch_overall = True\n\n\t\tresult['tasks'] = []\n\t\tresult['failed_task_labels'] = []\n\t\tresult['succeeded_task_labels'] = []\n\t\tfor i, label in enumerate(labels):\n\t\t\tf = files[i]\n\t\t\tref_f = ref_files[i]\n\t\t\tmd5 = md5sum(f)\n\t\t\tref_md5 = md5sum(ref_f)\n\t\t\t# if text file, read in contents\n\t\t\tif f.endswith('.qc') or f.endswith('.txt') or \\\n\t\t\t\tf.endswith('.log') or f.endswith('.out'):\n\t\t\t\twith open(f,'r') as fp:\n\t\t\t\t\tcontents = fp.read()\n\t\t\t\twith open(ref_f,'r') as fp:\n\t\t\t\t\tref_contents = fp.read()\n\t\t\telse:\n\t\t\t\tcontents = ''\n\t\t\t\tref_contents = ''\n\t\t\tmatched = md5==ref_md5\n\t\t\tresult['tasks'].append(OrderedDict([\n\t\t\t\t('label', label),\n\t\t\t\t('match', matched),\n\t\t\t\t('md5sum', md5),\n\t\t\t\t('ref_md5sum', ref_md5),\n\t\t\t\t('basename', os.path.basename(f)),\n\t\t\t\t('ref_basename', os.path.basename(ref_f)),\n\t\t\t\t('contents', contents),\n\t\t\t\t('ref_contents', ref_contents),\n\t\t\t\t]))\n\t\t\tmatch[label] = matched\n\t\t\tmatch_overall &= matched\n\t\t\tif matched:\n\t\t\t\tresult['succeeded_task_labels'].append(label)\n\t\t\telse:\n\t\t\t\tresult['failed_task_labels'].append(label)\t\t\n\t\tresult['match_overall'] = match_overall\n\n\t\twith open('result.json','w') as fp:\n\t\t\tfp.write(json.dumps(result, indent=4))\n\t\tmatch_tmp = []\n\t\tfor key in match:\n\t\t\tval = match[key]\n\t\t\tmatch_tmp.append('{}\\t{}'.format(key, val))\n\t\twith open('match.tsv','w') as fp:\n\t\t\tfp.writelines('\\n'.join(match_tmp))\n\t\twith open('match_overall.txt','w') as fp:\n\t\t\tfp.write(str(match_overall))\n\t\tCODE\n\t>>>\n\toutput {\n\t\tMap[String,String] match = read_map('match.tsv') # key:label, val:match\n\t\tBoolean match_overall = read_boolean('match_overall.txt')\n\t\tFile json = glob('result.json')[0] # details (json file)\n\t\tString json_str = read_string('result.json') # details (string)\n\t}\n\truntime {\n\t\tcpu : 1\n\t\tmemory : \"4000 MB\"\n\t\ttime : 1\n\t\tdisks : \"local-disk 50 HDD\"\t\t\n\t}\n}\n",
    "root": "None",
    "options": "{\n  \"default_runtime_attributes\": {\n    \"docker\": \"quay.io/encode-dcc/atac-seq-pipeline:v1.1.3\"\n  }\n}",
    "inputs": "{\n    \"atac.qc_report.qc_json_ref\" : \"gs://encode-pipeline-test-samples/encode-atac-seq-pipeline/ref_output/v1.1.6/ENCSR356KRQ/qc.json\",\n    \"atac.pipeline_type\" : \"atac\",\n    \"atac.genome_tsv\" : \"gs://encode-pipeline-genome-data/hg38_google.tsv\",\n    \"atac.fastqs\" : [\n        [\n            [\"gs://gbsc-gcp-project-hummingbird-user-xingziye/ENCODE/atac-seq-pipeline/ENCSR356KRQ/fastq_subsampled/rep1/pair1/ENCFF341MYG.subsampled.400.fastq.gz\",\n             \"gs://gbsc-gcp-project-hummingbird-user-xingziye/ENCODE/atac-seq-pipeline/ENCSR356KRQ/fastq_subsampled/rep1/pair2/ENCFF248EJF.subsampled.400.fastq.gz\"]\n        ]\n    ],\n    \"atac.adapters\" : [\n        [\n            [\"gs://gbsc-gcp-project-hummingbird-user-xingziye/tmp/adapter.txt\",\n             \"gs://gbsc-gcp-project-hummingbird-user-xingziye/tmp/adapter.txt\"]\n        ]\n    ],\n\n    \"atac.paired_end\" : true,\n    \"atac.multimapping\" : 4,\n\n    \"atac.auto_detect_adapter\" : true,\n\n    \"atac.trim_adapter.cpu\" : 4,\n\n    \"atac.bowtie2_cpu\" : 4,\n    \"atac.bowtie2_mem_mb\" : 16000,\n\n    \"atac.filter_cpu\" : 4,\n    \"atac.filter_mem_mb\" : 12000,\n\n    \"atac.macs2_mem_mb\" : 16000,\n\n    \"atac.smooth_win\" : 73,\n    \"atac.enable_idr\" : true,\n    \"atac.idr_thresh\" : 0.05,\n\n    \"atac.enable_xcor\" : true,\n\n    \"atac.title\" : \"ENCSR356KRQ_1M\",\n    \"atac.description\" : \"ATAC-seq on primary keratinocytes in day 0.0 of differentiation\"\n}\n",
    "labels": "{}"
  },
  "calls": {
    "atac.bam2ta": [{
      "preemptible": false,
      "executionStatus": "Done",
      "stdout": "gs://gbsc-gcp-project-hummingbird-user-xingziye/atac/b5e931fc-22e5-4c60-844b-0333ab0bf47e/call-bam2ta/shard-0/stdout",
      "backendStatus": "Success",
      "shardIndex": 0,
      "jes": {
        "endpointUrl": "https://genomics.googleapis.com/",
        "machineType": "us-central1-b/n1-highcpu-32",
        "googleProject": "gbsc-gcp-project-cba",
        "executionBucket": "gs://gbsc-gcp-project-hummingbird-user-xingziye",
        "zone": "us-central1-b",
        "instanceName": "ggp-15319094276824649043"
      },
      "outputs": {
        "ta": "gs://gbsc-gcp-project-hummingbird-user-xingziye/atac/b5e931fc-22e5-4c60-844b-0333ab0bf47e/call-bam2ta/shard-0/glob-199637d3015dccbe277f621a18be9eb4/ENCFF341MYG.subsampled.400.trim.merged.nodup.tn5.tagAlign.gz"
      },
      "runtimeAttributes": {
        "preemptible": "0",
        "failOnStderr": "false",
        "bootDiskSizeGb": "10",
        "disks": "local-disk 100 HDD",
        "continueOnReturnCode": "0",
        "docker": "quay.io/encode-dcc/atac-seq-pipeline:v1.1.3",
        "maxRetries": "0",
        "cpu": "32",
        "cpuMin": "1",
        "noAddress": "false",
        "zones": "us-central1-b",
        "memoryMin": "2048.0 MB",
        "memory": "10000.0 MB"
      },
      "callCaching": {
        "allowResultReuse": false,
        "effectiveCallCachingMode": "CallCachingOff"
      },
      "inputs": {
        "disable_tn5_shift": false,
        "subsample": 0,
        "mem_mb": 10000,
        "time_hr": 6,
        "disks": "local-disk 100 HDD",
        "regex_grep_v_ta": "chrM",
        "cpu": 32,
        "paired_end": true,
        "bam": "gs://gbsc-gcp-project-hummingbird-user-xingziye/atac/b5e931fc-22e5-4c60-844b-0333ab0bf47e/call-filter/shard-0/glob-3bcbe4e7489c90f75e0523ac6f3a9385/ENCFF341MYG.subsampled.400.trim.merged.nodup.bam"
      },
      "backendLabels": {
        "wdl-task-name": "bam2ta",
        "cromwell-workflow-id": "cromwell-b5e931fc-22e5-4c60-844b-0333ab0bf47e"
      },
      "returnCode": 0,
      "labels": {
        "wdl-task-name": "bam2ta",
        "cromwell-workflow-id": "cromwell-b5e931fc-22e5-4c60-844b-0333ab0bf47e"
      },
      "jobId": "operations/EO-nt_ydLRjTmunWyuKWzNQBIOv9oMaXHyoPcHJvZHVjdGlvblF1ZXVl",
      "backend": "PAPIv2",
      "end": "2019-04-02T12:41:16.029-07:00",
      "dockerImageUsed": "quay.io/encode-dcc/atac-seq-pipeline@sha256:ff3992deeefa7ac10fe633adae9369225643e5e922a68e465178c0be63039787",
      "stderr": "gs://gbsc-gcp-project-hummingbird-user-xingziye/atac/b5e931fc-22e5-4c60-844b-0333ab0bf47e/call-bam2ta/shard-0/stderr",
      "callRoot": "gs://gbsc-gcp-project-hummingbird-user-xingziye/atac/b5e931fc-22e5-4c60-844b-0333ab0bf47e/call-bam2ta/shard-0",
      "attempt": 1,
      "executionEvents": [{
        "endTime": "2019-04-02T12:36:22.762-07:00",
        "startTime": "2019-04-02T12:36:21.803-07:00",
        "description": "RequestingExecutionToken"
      }, {
        "endTime": "2019-04-02T12:36:21.803-07:00",
        "startTime": "2019-04-02T12:36:21.803-07:00",
        "description": "Pending"
      }, {
        "startTime": "2019-04-02T19:40:02.567015101Z",
        "endTime": "2019-04-02T19:40:06.678847185Z",
        "description": "localizing-files"
      }, {
        "description": "initializing VM",
        "startTime": "2019-04-02T19:36:53Z",
        "endTime": "2019-04-02T19:38:24.048774692Z"
      }, {
        "endTime": "2019-04-02T19:40:17.329951900Z",
        "startTime": "2019-04-02T19:40:06.678847185Z",
        "description": "running-docker"
      }, {
        "endTime": "2019-04-02T19:36:53Z",
        "startTime": "2019-04-02T19:36:47Z",
        "description": "waiting for quota"
      }, {
        "endTime": "2019-04-02T19:38:24.048905363Z",
        "description": "start",
        "startTime": "2019-04-02T19:38:24.048774692Z"
      }, {
        "endTime": "2019-04-02T12:36:22.763-07:00",
        "description": "WaitingForValueStore",
        "startTime": "2019-04-02T12:36:22.762-07:00"
      }, {
        "endTime": "2019-04-02T19:40:26.797515531Z",
        "description": "delocalizing-files",
        "startTime": "2019-04-02T19:40:17.329951900Z"
      }, {
        "description": "pulling-image",
        "startTime": "2019-04-02T19:38:24.048905363Z",
        "endTime": "2019-04-02T19:40:02.567015101Z"
      }, {
        "startTime": "2019-04-02T12:36:22.767-07:00",
        "description": "RunningJob",
        "endTime": "2019-04-02T19:36:47Z"
      }, {
        "startTime": "2019-04-02T12:36:22.763-07:00",
        "endTime": "2019-04-02T12:36:22.767-07:00",
        "description": "PreparingJob"
      }, {
        "endTime": "2019-04-02T12:41:16.029-07:00",
        "description": "UpdatingJobStore",
        "startTime": "2019-04-02T12:41:16.028-07:00"
      }, {
        "startTime": "2019-04-02T19:40:26.797515531Z",
        "description": "ok",
        "endTime": "2019-04-02T19:40:27Z"
      }, {
        "endTime": "2019-04-02T12:41:16.028-07:00",
        "startTime": "2019-04-02T19:40:27Z",
        "description": "cromwell poll interval"
      }],
      "backendLogs": {
        "log": "gs://gbsc-gcp-project-hummingbird-user-xingziye/atac/b5e931fc-22e5-4c60-844b-0333ab0bf47e/call-bam2ta/shard-0/bam2ta-0.log"
      },
      "start": "2019-04-02T12:36:21.803-07:00"
    }],
    "atac.read_genome_tsv": [{
      "preemptible": false,
      "executionStatus": "Done",
      "stdout": "gs://gbsc-gcp-project-hummingbird-user-xingziye/atac/b5e931fc-22e5-4c60-844b-0333ab0bf47e/call-read_genome_tsv/stdout",
      "backendStatus": "Success",
      "shardIndex": -1,
      "jes": {
        "endpointUrl": "https://genomics.googleapis.com/",
        "machineType": "us-central1-b/n1-standard-2",
        "googleProject": "gbsc-gcp-project-cba",
        "executionBucket": "gs://gbsc-gcp-project-hummingbird-user-xingziye",
        "zone": "us-central1-b",
        "instanceName": "ggp-8499500772828254385"
      },
      "outputs": {
        "genome": {
          "blacklist": "gs://encode-pipeline-genome-data/hg38/hg38.blacklist.bed.gz",
          "enh": "gs://encode-pipeline-genome-data/hg38/ataqc/reg2map_honeybadger2_dnase_enh_p2.hg19_to_hg38.bed.gz",
          "ref_fa": "gs://encode-pipeline-genome-data/hg38/GRCh38_no_alt_analysis_set_GCA_000001405.15.fasta.gz",
          "reg2map": "gs://encode-pipeline-genome-data/hg38/ataqc/hg38_dnase_avg_fseq_signal_formatted.txt.gz",
          "bwa_idx_tar": "gs://encode-pipeline-genome-data/hg38/bwa_index/GRCh38_no_alt_analysis_set_GCA_000001405.15.fasta.tar",
          "roadmap_meta": "gs://encode-pipeline-genome-data/hg38/ataqc/hg38_dnase_avg_fseq_signal_metadata.txt",
          "chrsz": "gs://encode-pipeline-genome-data/hg38/hg38.chrom.sizes",
          "bowtie2_idx_tar": "gs://encode-pipeline-genome-data/hg38/bowtie2_index/GRCh38_no_alt_analysis_set_GCA_000001405.15.fasta.tar",
          "reg2map_bed": "gs://encode-pipeline-genome-data/hg38/ataqc/hg38_celltype_compare_subsample.bed.gz",
          "gensz": "hs",
          "tss_enrich": "gs://encode-pipeline-genome-data/hg38/ataqc/hg38_gencode_tss_unique.bed.gz",
          "prom": "gs://encode-pipeline-genome-data/hg38/ataqc/reg2map_honeybadger2_dnase_prom_p2.hg19_to_hg38.bed.gz",
          "dnase": "gs://encode-pipeline-genome-data/hg38/ataqc/reg2map_honeybadger2_dnase_all_p10_ucsc.hg19_to_hg38.bed.gz"
        }
      },
      "runtimeAttributes": {
        "preemptible": "0",
        "failOnStderr": "false",
        "bootDiskSizeGb": "10",
        "disks": "local-disk 50 HDD",
        "continueOnReturnCode": "0",
        "docker": "quay.io/encode-dcc/atac-seq-pipeline:v1.1.3",
        "maxRetries": "0",
        "cpu": "1",
        "cpuMin": "1",
        "noAddress": "false",
        "zones": "us-central1-b",
        "memoryMin": "2048.0 MB",
        "memory": "4000.0 MB"
      },
      "callCaching": {
        "effectiveCallCachingMode": "CallCachingOff",
        "allowResultReuse": false
      },
      "inputs": {
        "genome_tsv": "gs://encode-pipeline-genome-data/hg38_google.tsv"
      },
      "backendLabels": {
        "wdl-task-name": "read-genome-tsv",
        "cromwell-workflow-id": "cromwell-b5e931fc-22e5-4c60-844b-0333ab0bf47e"
      },
      "returnCode": 0,
      "labels": {
        "cromwell-workflow-id": "cromwell-b5e931fc-22e5-4c60-844b-0333ab0bf47e",
        "wdl-task-name": "read_genome_tsv"
      },
      "jobId": "operations/EJHD3_udLRixodjkut2S-nUg6_2gxpcfKg9wcm9kdWN0aW9uUXVldWU",
      "backend": "PAPIv2",
      "end": "2019-04-02T12:18:57.854-07:00",
      "dockerImageUsed": "quay.io/encode-dcc/atac-seq-pipeline@sha256:ff3992deeefa7ac10fe633adae9369225643e5e922a68e465178c0be63039787",
      "stderr": "gs://gbsc-gcp-project-hummingbird-user-xingziye/atac/b5e931fc-22e5-4c60-844b-0333ab0bf47e/call-read_genome_tsv/stderr",
      "callRoot": "gs://gbsc-gcp-project-hummingbird-user-xingziye/atac/b5e931fc-22e5-4c60-844b-0333ab0bf47e/call-read_genome_tsv",
      "attempt": 1,
      "executionEvents": [{
        "startTime": "2019-04-02T12:12:34.667-07:00",
        "endTime": "2019-04-02T12:12:34.741-07:00",
        "description": "RequestingExecutionToken"
      }, {
        "endTime": "2019-04-02T19:14:46.236273865Z",
        "startTime": "2019-04-02T19:14:46.236207277Z",
        "description": "start"
      }, {
        "startTime": "2019-04-02T12:18:57.854-07:00",
        "description": "UpdatingJobStore",
        "endTime": "2019-04-02T12:18:57.854-07:00"
      }, {
        "endTime": "2019-04-02T12:12:34.752-07:00",
        "startTime": "2019-04-02T12:12:34.741-07:00",
        "description": "WaitingForValueStore"
      }, {
        "endTime": "2019-04-02T19:17:24.646184518Z",
        "description": "delocalizing-files",
        "startTime": "2019-04-02T19:17:18.315111175Z"
      }, {
        "startTime": "2019-04-02T19:17:11.122960291Z",
        "description": "localizing-files",
        "endTime": "2019-04-02T19:17:14.481038080Z"
      }, {
        "startTime": "2019-04-02T19:17:14.481038080Z",
        "description": "running-docker",
        "endTime": "2019-04-02T19:17:18.315111175Z"
      }, {
        "startTime": "2019-04-02T19:17:25Z",
        "description": "cromwell poll interval",
        "endTime": "2019-04-02T12:18:57.854-07:00"
      }, {
        "startTime": "2019-04-02T12:12:34.645-07:00",
        "description": "Pending",
        "endTime": "2019-04-02T12:12:34.667-07:00"
      }, {
        "endTime": "2019-04-02T19:17:11.122960291Z",
        "description": "pulling-image",
        "startTime": "2019-04-02T19:14:46.236273865Z"
      }, {
        "endTime": "2019-04-02T19:12:49Z",
        "startTime": "2019-04-02T12:12:35.230-07:00",
        "description": "RunningJob"
      }, {
        "endTime": "2019-04-02T19:14:46.236207277Z",
        "description": "initializing VM",
        "startTime": "2019-04-02T19:12:56Z"
      }, {
        "endTime": "2019-04-02T12:12:35.230-07:00",
        "startTime": "2019-04-02T12:12:34.752-07:00",
        "description": "PreparingJob"
      }, {
        "description": "waiting for quota",
        "startTime": "2019-04-02T19:12:49Z",
        "endTime": "2019-04-02T19:12:56Z"
      }, {
        "description": "ok",
        "endTime": "2019-04-02T19:17:25Z",
        "startTime": "2019-04-02T19:17:24.646184518Z"
      }],
      "backendLogs": {
        "log": "gs://gbsc-gcp-project-hummingbird-user-xingziye/atac/b5e931fc-22e5-4c60-844b-0333ab0bf47e/call-read_genome_tsv/read_genome_tsv.log"
      },
      "start": "2019-04-02T12:12:34.629-07:00"
    }],
    "atac.idr_pr": [{
      "preemptible": false,
      "executionStatus": "Done",
      "stdout": "gs://gbsc-gcp-project-hummingbird-user-xingziye/atac/b5e931fc-22e5-4c60-844b-0333ab0bf47e/call-idr_pr/shard-0/stdout",
      "backendStatus": "Success",
      "shardIndex": 0,
      "jes": {
        "endpointUrl": "https://genomics.googleapis.com/",
        "machineType": "us-central1-b/n1-highmem-2",
        "googleProject": "gbsc-gcp-project-cba",
        "executionBucket": "gs://gbsc-gcp-project-hummingbird-user-xingziye",
        "zone": "us-central1-b",
        "instanceName": "ggp-4170010272938115807"
      },
      "outputs": {
        "bfilt_idr_peak_hammock": ["gs://gbsc-gcp-project-hummingbird-user-xingziye/atac/b5e931fc-22e5-4c60-844b-0333ab0bf47e/call-idr_pr/shard-0/glob-08ed81b9c4c9ccf6c3692d9ea29b11e0/rep1-pr.idr0.05.bfilt.narrowPeak.hammock.gz", "gs://gbsc-gcp-project-hummingbird-user-xingziye/atac/b5e931fc-22e5-4c60-844b-0333ab0bf47e/call-idr_pr/shard-0/glob-08ed81b9c4c9ccf6c3692d9ea29b11e0/rep1-pr.idr0.05.bfilt.narrowPeak.hammock.gz.tbi"],
        "idr_plot": "gs://gbsc-gcp-project-hummingbird-user-xingziye/atac/b5e931fc-22e5-4c60-844b-0333ab0bf47e/call-idr_pr/shard-0/glob-8da83e7748d9e54f3e082eb4aa171757/rep1-pr.idr0.05.unthresholded-peaks.txt.png",
        "idr_unthresholded_peak": "gs://gbsc-gcp-project-hummingbird-user-xingziye/atac/b5e931fc-22e5-4c60-844b-0333ab0bf47e/call-idr_pr/shard-0/glob-b34256f7f8497ceb77fad19f39663af0/rep1-pr.idr0.05.unthresholded-peaks.txt.gz",
        "frip_qc": "gs://gbsc-gcp-project-hummingbird-user-xingziye/atac/b5e931fc-22e5-4c60-844b-0333ab0bf47e/call-idr_pr/shard-0/glob-156b027b56a0fc9230201b265d9f4bf4/rep1-pr.idr0.05.bfilt.frip.qc",
        "idr_peak": "gs://gbsc-gcp-project-hummingbird-user-xingziye/atac/b5e931fc-22e5-4c60-844b-0333ab0bf47e/call-idr_pr/shard-0/glob-254907fcd430d7e6c9bf67ac4585adb4/rep1-pr.idr0.05.narrowPeak.gz",
        "bfilt_idr_peak": "gs://gbsc-gcp-project-hummingbird-user-xingziye/atac/b5e931fc-22e5-4c60-844b-0333ab0bf47e/call-idr_pr/shard-0/glob-2e6c87fc90e45fa5dbda88934d454cd3/rep1-pr.idr0.05.bfilt.narrowPeak.gz",
        "idr_log": "gs://gbsc-gcp-project-hummingbird-user-xingziye/atac/b5e931fc-22e5-4c60-844b-0333ab0bf47e/call-idr_pr/shard-0/glob-c94d492e4d5a9e6759399733eb456839/rep1-pr.idr0.05.log",
        "bfilt_idr_peak_bb": "gs://gbsc-gcp-project-hummingbird-user-xingziye/atac/b5e931fc-22e5-4c60-844b-0333ab0bf47e/call-idr_pr/shard-0/glob-155eada107f68a2195912a39f5dee4bc/rep1-pr.idr0.05.bfilt.narrowPeak.bb"
      },
      "runtimeAttributes": {
        "preemptible": "0",
        "failOnStderr": "false",
        "bootDiskSizeGb": "10",
        "disks": "local-disk 50 HDD",
        "continueOnReturnCode": "0",
        "docker": "quay.io/encode-dcc/atac-seq-pipeline:v1.1.3",
        "maxRetries": "0",
        "cpu": "1",
        "cpuMin": "1",
        "noAddress": "false",
        "zones": "us-central1-b",
        "memoryMin": "2048.0 MB",
        "memory": "8000.0 MB"
      },
      "callCaching": {
        "effectiveCallCachingMode": "CallCachingOff",
        "allowResultReuse": false
      },
      "inputs": {
        "blacklist": "gs://encode-pipeline-genome-data/hg38/hg38.blacklist.bed.gz",
        "peak_type": "narrowPeak",
        "ta": "gs://gbsc-gcp-project-hummingbird-user-xingziye/atac/b5e931fc-22e5-4c60-844b-0333ab0bf47e/call-bam2ta/shard-0/glob-199637d3015dccbe277f621a18be9eb4/ENCFF341MYG.subsampled.400.trim.merged.nodup.tn5.tagAlign.gz",
        "prefix": "rep1-pr",
        "peak2": "gs://gbsc-gcp-project-hummingbird-user-xingziye/atac/b5e931fc-22e5-4c60-844b-0333ab0bf47e/call-macs2_pr2/shard-0/glob-254907fcd430d7e6c9bf67ac4585adb4/ENCFF341MYG.subsampled.400.trim.merged.nodup.tn5.pr2.pval0.01.300K.narrowPeak.gz",
        "rank": "p.value",
        "chrsz": "gs://encode-pipeline-genome-data/hg38/hg38.chrom.sizes",
        "idr_thresh": 0.05,
        "keep_irregular_chr_in_bfilt_peak": false,
        "peak1": "gs://gbsc-gcp-project-hummingbird-user-xingziye/atac/b5e931fc-22e5-4c60-844b-0333ab0bf47e/call-macs2_pr1/shard-0/glob-254907fcd430d7e6c9bf67ac4585adb4/ENCFF341MYG.subsampled.400.trim.merged.nodup.tn5.pr1.pval0.01.300K.narrowPeak.gz",
        "peak_pooled": "gs://gbsc-gcp-project-hummingbird-user-xingziye/atac/b5e931fc-22e5-4c60-844b-0333ab0bf47e/call-macs2/shard-0/glob-254907fcd430d7e6c9bf67ac4585adb4/ENCFF341MYG.subsampled.400.trim.merged.nodup.tn5.pval0.01.300K.narrowPeak.gz"
      },
      "backendLabels": {
        "wdl-call-alias": "idr-pr",
        "cromwell-workflow-id": "cromwell-b5e931fc-22e5-4c60-844b-0333ab0bf47e",
        "wdl-task-name": "idr"
      },
      "returnCode": 0,
      "labels": {
        "wdl-call-alias": "idr_pr",
        "cromwell-workflow-id": "cromwell-b5e931fc-22e5-4c60-844b-0333ab0bf47e",
        "wdl-task-name": "idr"
      },
      "jobId": "operations/EPPsgP2dLRjfhdOh_se27zkg6_2gxpcfKg9wcm9kdWN0aW9uUXVldWU",
      "backend": "PAPIv2",
      "end": "2019-04-02T13:01:56.471-07:00",
      "dockerImageUsed": "quay.io/encode-dcc/atac-seq-pipeline@sha256:ff3992deeefa7ac10fe633adae9369225643e5e922a68e465178c0be63039787",
      "stderr": "gs://gbsc-gcp-project-hummingbird-user-xingziye/atac/b5e931fc-22e5-4c60-844b-0333ab0bf47e/call-idr_pr/shard-0/stderr",
      "callRoot": "gs://gbsc-gcp-project-hummingbird-user-xingziye/atac/b5e931fc-22e5-4c60-844b-0333ab0bf47e/call-idr_pr/shard-0",
      "attempt": 1,
      "executionEvents": [{
        "endTime": "2019-04-02T13:01:56.470-07:00",
        "startTime": "2019-04-02T13:01:56.470-07:00",
        "description": "UpdatingJobStore"
      }, {
        "description": "RunningJob",
        "endTime": "2019-04-02T19:56:52Z",
        "startTime": "2019-04-02T12:56:25.812-07:00"
      }, {
        "startTime": "2019-04-02T12:56:25.803-07:00",
        "endTime": "2019-04-02T12:56:25.804-07:00",
        "description": "WaitingForValueStore"
      }, {
        "endTime": "2019-04-02T19:59:30.433622304Z",
        "startTime": "2019-04-02T19:57:22.855840011Z",
        "description": "pulling-image"
      }, {
        "description": "waiting for quota",
        "startTime": "2019-04-02T19:56:52Z",
        "endTime": "2019-04-02T19:56:58Z"
      }, {
        "endTime": "2019-04-02T19:59:54.932314890Z",
        "description": "running-docker",
        "startTime": "2019-04-02T19:59:38.641238863Z"
      }, {
        "endTime": "2019-04-02T19:59:38.641238863Z",
        "startTime": "2019-04-02T19:59:30.433622304Z",
        "description": "localizing-files"
      }, {
        "endTime": "2019-04-02T19:57:22.855757780Z",
        "description": "initializing VM",
        "startTime": "2019-04-02T19:56:58Z"
      }, {
        "endTime": "2019-04-02T19:57:22.855840011Z",
        "description": "start",
        "startTime": "2019-04-02T19:57:22.855757780Z"
      }, {
        "description": "Pending",
        "startTime": "2019-04-02T12:56:25.574-07:00",
        "endTime": "2019-04-02T12:56:25.574-07:00"
      }, {
        "description": "cromwell poll interval",
        "endTime": "2019-04-02T13:01:56.470-07:00",
        "startTime": "2019-04-02T20:00:22Z"
      }, {
        "description": "PreparingJob",
        "startTime": "2019-04-02T12:56:25.804-07:00",
        "endTime": "2019-04-02T12:56:25.812-07:00"
      }, {
        "startTime": "2019-04-02T19:59:54.932314890Z",
        "description": "delocalizing-files",
        "endTime": "2019-04-02T20:00:21.725882898Z"
      }, {
        "startTime": "2019-04-02T12:56:25.574-07:00",
        "description": "RequestingExecutionToken",
        "endTime": "2019-04-02T12:56:25.803-07:00"
      }, {
        "startTime": "2019-04-02T20:00:21.725882898Z",
        "description": "ok",
        "endTime": "2019-04-02T20:00:22Z"
      }],
      "backendLogs": {
        "log": "gs://gbsc-gcp-project-hummingbird-user-xingziye/atac/b5e931fc-22e5-4c60-844b-0333ab0bf47e/call-idr_pr/shard-0/idr_pr-0.log"
      },
      "start": "2019-04-02T12:56:25.574-07:00"
    }],
    "atac.ataqc": [{
      "preemptible": false,
      "executionStatus": "Done",
      "stdout": "gs://gbsc-gcp-project-hummingbird-user-xingziye/atac/b5e931fc-22e5-4c60-844b-0333ab0bf47e/call-ataqc/shard-0/stdout",
      "backendStatus": "Success",
      "shardIndex": 0,
      "jes": {
        "endpointUrl": "https://genomics.googleapis.com/",
        "machineType": "us-central1-b/n1-highmem-4",
        "googleProject": "gbsc-gcp-project-cba",
        "executionBucket": "gs://gbsc-gcp-project-hummingbird-user-xingziye",
        "zone": "us-central1-b",
        "instanceName": "ggp-5864768928021625811"
      },
      "outputs": {
        "html": "gs://gbsc-gcp-project-hummingbird-user-xingziye/atac/b5e931fc-22e5-4c60-844b-0333ab0bf47e/call-ataqc/shard-0/glob-47eccad02a94d57a391dcc7587d65007/ENCFF341MYG.subsampled.400.trim.merged_qc.html",
        "txt": "gs://gbsc-gcp-project-hummingbird-user-xingziye/atac/b5e931fc-22e5-4c60-844b-0333ab0bf47e/call-ataqc/shard-0/glob-add762cb3e49a6937f1540db118fa0c8/ENCFF341MYG.subsampled.400.trim.merged_qc.txt"
      },
      "runtimeAttributes": {
        "preemptible": "0",
        "failOnStderr": "false",
        "bootDiskSizeGb": "10",
        "disks": "local-disk 200 HDD",
        "continueOnReturnCode": "0",
        "docker": "quay.io/encode-dcc/atac-seq-pipeline:v1.1.3",
        "maxRetries": "0",
        "cpu": "1",
        "cpuMin": "1",
        "noAddress": "false",
        "zones": "us-central1-b",
        "memoryMin": "2048.0 MB",
        "memory": "16000.0 MB"
      },
      "callCaching": {
        "effectiveCallCachingMode": "CallCachingOff",
        "allowResultReuse": false
      },
      "inputs": {
        "blacklist": "gs://encode-pipeline-genome-data/hg38/hg38.blacklist.bed.gz",
        "enh": "gs://encode-pipeline-genome-data/hg38/ataqc/reg2map_honeybadger2_dnase_enh_p2.hg19_to_hg38.bed.gz",
        "ta": "gs://gbsc-gcp-project-hummingbird-user-xingziye/atac/b5e931fc-22e5-4c60-844b-0333ab0bf47e/call-bam2ta/shard-0/glob-199637d3015dccbe277f621a18be9eb4/ENCFF341MYG.subsampled.400.trim.merged.nodup.tn5.tagAlign.gz",
        "ref_fa": "gs://encode-pipeline-genome-data/hg38/GRCh38_no_alt_analysis_set_GCA_000001405.15.fasta.gz",
        "nodup_flagstat_log": "gs://gbsc-gcp-project-hummingbird-user-xingziye/atac/b5e931fc-22e5-4c60-844b-0333ab0bf47e/call-filter/shard-0/glob-e2a84eed5523fc4955f617236139026c/ENCFF341MYG.subsampled.400.trim.merged.nodup.flagstat.qc",
        "bowtie2_log": "gs://gbsc-gcp-project-hummingbird-user-xingziye/atac/b5e931fc-22e5-4c60-844b-0333ab0bf47e/call-bowtie2/shard-0/glob-2b79af24cb30a9eaebb132920a58f9c5/ENCFF341MYG.subsampled.400.trim.merged.align.log",
        "reg2map": "gs://encode-pipeline-genome-data/hg38/ataqc/hg38_dnase_avg_fseq_signal_formatted.txt.gz",
        "mem_java_mb": 16000,
        "bigwig": "gs://gbsc-gcp-project-hummingbird-user-xingziye/atac/b5e931fc-22e5-4c60-844b-0333ab0bf47e/call-macs2/shard-0/glob-7ab0340dfeb10ca109917cbdcc568548/ENCFF341MYG.subsampled.400.trim.merged.nodup.tn5.pval.signal.bigwig",
        "mem_mb": 16000,
        "time_hr": 24,
        "roadmap_meta": "gs://encode-pipeline-genome-data/hg38/ataqc/hg38_dnase_avg_fseq_signal_metadata.txt",
        "chrsz": "gs://encode-pipeline-genome-data/hg38/hg38.chrom.sizes",
        "disks": "local-disk 200 HDD",
        "peak": "gs://gbsc-gcp-project-hummingbird-user-xingziye/atac/b5e931fc-22e5-4c60-844b-0333ab0bf47e/call-idr_pr/shard-0/glob-2e6c87fc90e45fa5dbda88934d454cd3/rep1-pr.idr0.05.bfilt.narrowPeak.gz",
        "reg2map_bed": "gs://encode-pipeline-genome-data/hg38/ataqc/hg38_celltype_compare_subsample.bed.gz",
        "tss_enrich": "gs://encode-pipeline-genome-data/hg38/ataqc/hg38_gencode_tss_unique.bed.gz",
        "nodup_bam": "gs://gbsc-gcp-project-hummingbird-user-xingziye/atac/b5e931fc-22e5-4c60-844b-0333ab0bf47e/call-filter/shard-0/glob-3bcbe4e7489c90f75e0523ac6f3a9385/ENCFF341MYG.subsampled.400.trim.merged.nodup.bam",
        "read_len_log": "gs://gbsc-gcp-project-hummingbird-user-xingziye/atac/b5e931fc-22e5-4c60-844b-0333ab0bf47e/call-bowtie2/shard-0/glob-773fb92850749a2b4a829cf3c8c4de27/ENCFF248EJF.subsampled.400.trim.merged.read_length.txt",
        "paired_end": true,
        "overlap_peak": "gs://gbsc-gcp-project-hummingbird-user-xingziye/atac/b5e931fc-22e5-4c60-844b-0333ab0bf47e/call-reproducibility_overlap/glob-d4142e5b6299782081eeeebbe4d87b3e/optimal_peak.narrowPeak.gz",
        "idr_peak": "gs://gbsc-gcp-project-hummingbird-user-xingziye/atac/b5e931fc-22e5-4c60-844b-0333ab0bf47e/call-reproducibility_idr/glob-d4142e5b6299782081eeeebbe4d87b3e/optimal_peak.narrowPeak.gz",
        "prom": "gs://encode-pipeline-genome-data/hg38/ataqc/reg2map_honeybadger2_dnase_prom_p2.hg19_to_hg38.bed.gz",
        "flagstat_log": "gs://gbsc-gcp-project-hummingbird-user-xingziye/atac/b5e931fc-22e5-4c60-844b-0333ab0bf47e/call-bowtie2/shard-0/glob-e2a84eed5523fc4955f617236139026c/ENCFF341MYG.subsampled.400.trim.merged.flagstat.qc",
        "dup_log": "gs://gbsc-gcp-project-hummingbird-user-xingziye/atac/b5e931fc-22e5-4c60-844b-0333ab0bf47e/call-filter/shard-0/glob-1b4794e80f740fd50137e3a948d7ba79/ENCFF341MYG.subsampled.400.trim.merged.dup.qc",
        "bam": "gs://gbsc-gcp-project-hummingbird-user-xingziye/atac/b5e931fc-22e5-4c60-844b-0333ab0bf47e/call-bowtie2/shard-0/glob-3bcbe4e7489c90f75e0523ac6f3a9385/ENCFF341MYG.subsampled.400.trim.merged.bam",
        "mito_dup_log": "gs://gbsc-gcp-project-hummingbird-user-xingziye/atac/b5e931fc-22e5-4c60-844b-0333ab0bf47e/call-filter/shard-0/glob-464553c80b37704e09c623386a14d01f/ENCFF341MYG.subsampled.400.trim.merged.dupmark.mito_dup.txt",
        "pbc_log": "gs://gbsc-gcp-project-hummingbird-user-xingziye/atac/b5e931fc-22e5-4c60-844b-0333ab0bf47e/call-filter/shard-0/glob-85baf8309ae5456274184b199e3a7924/ENCFF341MYG.subsampled.400.trim.merged.dupmark.pbc.qc",
        "dnase": "gs://encode-pipeline-genome-data/hg38/ataqc/reg2map_honeybadger2_dnase_all_p10_ucsc.hg19_to_hg38.bed.gz"
      },
      "backendLabels": {
        "wdl-task-name": "ataqc",
        "cromwell-workflow-id": "cromwell-b5e931fc-22e5-4c60-844b-0333ab0bf47e"
      },
      "returnCode": 0,
      "labels": {
        "wdl-task-name": "ataqc",
        "cromwell-workflow-id": "cromwell-b5e931fc-22e5-4c60-844b-0333ab0bf47e"
      },
      "jobId": "operations/EJreqf2dLRjT9-ijxoj2sVEg6_2gxpcfKg9wcm9kdWN0aW9uUXVldWU",
      "backend": "PAPIv2",
      "end": "2019-04-02T13:20:52.742-07:00",
      "dockerImageUsed": "quay.io/encode-dcc/atac-seq-pipeline@sha256:ff3992deeefa7ac10fe633adae9369225643e5e922a68e465178c0be63039787",
      "stderr": "gs://gbsc-gcp-project-hummingbird-user-xingziye/atac/b5e931fc-22e5-4c60-844b-0333ab0bf47e/call-ataqc/shard-0/stderr",
      "callRoot": "gs://gbsc-gcp-project-hummingbird-user-xingziye/atac/b5e931fc-22e5-4c60-844b-0333ab0bf47e/call-ataqc/shard-0",
      "attempt": 1,
      "executionEvents": [{
        "startTime": "2019-04-02T20:10:27.101840677Z",
        "endTime": "2019-04-02T20:10:27.101922772Z",
        "description": "start"
      }, {
        "endTime": "2019-04-02T20:10:27.101840677Z",
        "startTime": "2019-04-02T20:08:07Z",
        "description": "initializing VM"
      }, {
        "endTime": "2019-04-02T20:11:51.081961322Z",
        "description": "pulling-image",
        "startTime": "2019-04-02T20:10:27.101922772Z"
      }, {
        "endTime": "2019-04-02T20:18:52.510089674Z",
        "description": "ok",
        "startTime": "2019-04-02T20:18:52.510089674Z"
      }, {
        "endTime": "2019-04-02T20:18:52.510089674Z",
        "startTime": "2019-04-02T20:18:42.492302581Z",
        "description": "delocalizing-files"
      }, {
        "description": "Pending",
        "startTime": "2019-04-02T13:07:33.698-07:00",
        "endTime": "2019-04-02T13:07:33.698-07:00"
      }, {
        "endTime": "2019-04-02T13:07:33.833-07:00",
        "startTime": "2019-04-02T13:07:33.827-07:00",
        "description": "PreparingJob"
      }, {
        "endTime": "2019-04-02T20:12:34.084934142Z",
        "startTime": "2019-04-02T20:11:51.081961322Z",
        "description": "localizing-files"
      }, {
        "endTime": "2019-04-02T20:18:42.492302581Z",
        "startTime": "2019-04-02T20:12:34.084934142Z",
        "description": "running-docker"
      }, {
        "endTime": "2019-04-02T20:08:02Z",
        "description": "RunningJob",
        "startTime": "2019-04-02T13:07:33.833-07:00"
      }, {
        "endTime": "2019-04-02T13:07:33.827-07:00",
        "description": "WaitingForValueStore",
        "startTime": "2019-04-02T13:07:33.827-07:00"
      }, {
        "endTime": "2019-04-02T13:20:52.742-07:00",
        "startTime": "2019-04-02T13:20:52.742-07:00",
        "description": "UpdatingJobStore"
      }, {
        "endTime": "2019-04-02T20:08:07Z",
        "startTime": "2019-04-02T20:08:02Z",
        "description": "waiting for quota"
      }, {
        "endTime": "2019-04-02T13:07:33.827-07:00",
        "description": "RequestingExecutionToken",
        "startTime": "2019-04-02T13:07:33.698-07:00"
      }, {
        "endTime": "2019-04-02T13:20:52.742-07:00",
        "description": "cromwell poll interval",
        "startTime": "2019-04-02T20:18:52.510089674Z"
      }],
      "backendLogs": {
        "log": "gs://gbsc-gcp-project-hummingbird-user-xingziye/atac/b5e931fc-22e5-4c60-844b-0333ab0bf47e/call-ataqc/shard-0/ataqc-0.log"
      },
      "start": "2019-04-02T13:07:33.698-07:00"
    }],
    "atac.macs2_pr2": [{
      "preemptible": false,
      "executionStatus": "Done",
      "stdout": "gs://gbsc-gcp-project-hummingbird-user-xingziye/atac/b5e931fc-22e5-4c60-844b-0333ab0bf47e/call-macs2_pr2/shard-0/stdout",
      "backendStatus": "Success",
      "shardIndex": 0,
      "jes": {
        "endpointUrl": "https://genomics.googleapis.com/",
        "machineType": "us-central1-b/n1-highmem-4",
        "googleProject": "gbsc-gcp-project-cba",
        "executionBucket": "gs://gbsc-gcp-project-hummingbird-user-xingziye",
        "zone": "us-central1-b",
        "instanceName": "ggp-6743004869991545253"
      },
      "outputs": {
        "sig_fc": "gs://gbsc-gcp-project-hummingbird-user-xingziye/atac/b5e931fc-22e5-4c60-844b-0333ab0bf47e/call-macs2_pr2/shard-0/glob-37a6259cc0c1dae299a7866489dff0bd/null",
        "bfilt_npeak": "gs://gbsc-gcp-project-hummingbird-user-xingziye/atac/b5e931fc-22e5-4c60-844b-0333ab0bf47e/call-macs2_pr2/shard-0/glob-2e6c87fc90e45fa5dbda88934d454cd3/ENCFF341MYG.subsampled.400.trim.merged.nodup.tn5.pr2.pval0.01.300K.bfilt.narrowPeak.gz",
        "bfilt_npeak_bb": "gs://gbsc-gcp-project-hummingbird-user-xingziye/atac/b5e931fc-22e5-4c60-844b-0333ab0bf47e/call-macs2_pr2/shard-0/glob-155eada107f68a2195912a39f5dee4bc/ENCFF341MYG.subsampled.400.trim.merged.nodup.tn5.pr2.pval0.01.300K.bfilt.narrowPeak.bb",
        "frip_qc": "gs://gbsc-gcp-project-hummingbird-user-xingziye/atac/b5e931fc-22e5-4c60-844b-0333ab0bf47e/call-macs2_pr2/shard-0/glob-156b027b56a0fc9230201b265d9f4bf4/ENCFF341MYG.subsampled.400.trim.merged.nodup.tn5.pr2.pval0.01.300K.bfilt.frip.qc",
        "bfilt_npeak_hammock": ["gs://gbsc-gcp-project-hummingbird-user-xingziye/atac/b5e931fc-22e5-4c60-844b-0333ab0bf47e/call-macs2_pr2/shard-0/glob-08ed81b9c4c9ccf6c3692d9ea29b11e0/ENCFF341MYG.subsampled.400.trim.merged.nodup.tn5.pr2.pval0.01.300K.bfilt.narrowPeak.hammock.gz", "gs://gbsc-gcp-project-hummingbird-user-xingziye/atac/b5e931fc-22e5-4c60-844b-0333ab0bf47e/call-macs2_pr2/shard-0/glob-08ed81b9c4c9ccf6c3692d9ea29b11e0/ENCFF341MYG.subsampled.400.trim.merged.nodup.tn5.pr2.pval0.01.300K.bfilt.narrowPeak.hammock.gz.tbi"],
        "sig_pval": "gs://gbsc-gcp-project-hummingbird-user-xingziye/atac/b5e931fc-22e5-4c60-844b-0333ab0bf47e/call-macs2_pr2/shard-0/glob-37a6259cc0c1dae299a7866489dff0bd/null",
        "npeak": "gs://gbsc-gcp-project-hummingbird-user-xingziye/atac/b5e931fc-22e5-4c60-844b-0333ab0bf47e/call-macs2_pr2/shard-0/glob-254907fcd430d7e6c9bf67ac4585adb4/ENCFF341MYG.subsampled.400.trim.merged.nodup.tn5.pr2.pval0.01.300K.narrowPeak.gz"
      },
      "runtimeAttributes": {
        "preemptible": "0",
        "failOnStderr": "false",
        "bootDiskSizeGb": "10",
        "disks": "local-disk 100 HDD",
        "continueOnReturnCode": "0",
        "docker": "quay.io/encode-dcc/atac-seq-pipeline:v1.1.3",
        "maxRetries": "0",
        "cpu": "1",
        "cpuMin": "1",
        "noAddress": "false",
        "zones": "us-central1-b",
        "memoryMin": "2048.0 MB",
        "memory": "16000.0 MB"
      },
      "callCaching": {
        "allowResultReuse": false,
        "effectiveCallCachingMode": "CallCachingOff"
      },
      "inputs": {
        "blacklist": "gs://encode-pipeline-genome-data/hg38/hg38.blacklist.bed.gz",
        "ta": "gs://gbsc-gcp-project-hummingbird-user-xingziye/atac/b5e931fc-22e5-4c60-844b-0333ab0bf47e/call-spr/shard-0/glob-a7cc663e5a8a49cc3d9bc036f4370f1c/ENCFF341MYG.subsampled.400.trim.merged.nodup.tn5.pr2.tagAlign.gz",
        "cap_num_peak": 300000,
        "mem_mb": 16000,
        "time_hr": 24,
        "pval_thresh": 0.01,
        "chrsz": "gs://encode-pipeline-genome-data/hg38/hg38.chrom.sizes",
        "disks": "local-disk 100 HDD",
        "keep_irregular_chr_in_bfilt_peak": false,
        "gensz": "hs",
        "make_signal": false,
        "smooth_win": 73
      },
      "backendLabels": {
        "wdl-call-alias": "macs2-pr2",
        "wdl-task-name": "macs2",
        "cromwell-workflow-id": "cromwell-b5e931fc-22e5-4c60-844b-0333ab0bf47e"
      },
      "returnCode": 0,
      "labels": {
        "wdl-task-name": "macs2",
        "cromwell-workflow-id": "cromwell-b5e931fc-22e5-4c60-844b-0333ab0bf47e",
        "wdl-call-alias": "macs2_pr2"
      },
      "jobId": "operations/EN6B2PydLRil88zUwOb9yV0g6_2gxpcfKg9wcm9kdWN0aW9uUXVldWU",
      "backend": "PAPIv2",
      "end": "2019-04-02T12:56:20.733-07:00",
      "dockerImageUsed": "quay.io/encode-dcc/atac-seq-pipeline@sha256:ff3992deeefa7ac10fe633adae9369225643e5e922a68e465178c0be63039787",
      "stderr": "gs://gbsc-gcp-project-hummingbird-user-xingziye/atac/b5e931fc-22e5-4c60-844b-0333ab0bf47e/call-macs2_pr2/shard-0/stderr",
      "callRoot": "gs://gbsc-gcp-project-hummingbird-user-xingziye/atac/b5e931fc-22e5-4c60-844b-0333ab0bf47e/call-macs2_pr2/shard-0",
      "attempt": 1,
      "executionEvents": [{
        "endTime": "2019-04-02T12:45:12.786-07:00",
        "startTime": "2019-04-02T12:45:12.781-07:00",
        "description": "PreparingJob"
      }, {
        "startTime": "2019-04-02T12:56:20.733-07:00",
        "endTime": "2019-04-02T12:56:20.734-07:00",
        "description": "UpdatingJobStore"
      }, {
        "endTime": "2019-04-02T19:50:42.430799020Z",
        "description": "pulling-image",
        "startTime": "2019-04-02T19:46:43.239739233Z"
      }, {
        "endTime": "2019-04-02T19:46:43.239739233Z",
        "startTime": "2019-04-02T19:46:43.239654524Z",
        "description": "start"
      }, {
        "endTime": "2019-04-02T19:50:49.107129761Z",
        "startTime": "2019-04-02T19:50:42.430799020Z",
        "description": "localizing-files"
      }, {
        "description": "RequestingExecutionToken",
        "startTime": "2019-04-02T12:45:12.293-07:00",
        "endTime": "2019-04-02T12:45:12.780-07:00"
      }, {
        "description": "running-docker",
        "endTime": "2019-04-02T19:53:55.599494433Z",
        "startTime": "2019-04-02T19:50:49.107129761Z"
      }, {
        "endTime": "2019-04-02T12:45:12.781-07:00",
        "description": "WaitingForValueStore",
        "startTime": "2019-04-02T12:45:12.780-07:00"
      }, {
        "startTime": "2019-04-02T19:54:23Z",
        "endTime": "2019-04-02T12:56:20.733-07:00",
        "description": "cromwell poll interval"
      }, {
        "startTime": "2019-04-02T19:45:43Z",
        "description": "waiting for quota",
        "endTime": "2019-04-02T19:45:48Z"
      }, {
        "description": "delocalizing-files",
        "startTime": "2019-04-02T19:53:55.599494433Z",
        "endTime": "2019-04-02T19:54:22.817725451Z"
      }, {
        "endTime": "2019-04-02T19:45:43Z",
        "description": "RunningJob",
        "startTime": "2019-04-02T12:45:12.786-07:00"
      }, {
        "endTime": "2019-04-02T12:45:12.293-07:00",
        "startTime": "2019-04-02T12:45:12.293-07:00",
        "description": "Pending"
      }, {
        "startTime": "2019-04-02T19:54:22.817725451Z",
        "description": "ok",
        "endTime": "2019-04-02T19:54:23Z"
      }, {
        "startTime": "2019-04-02T19:45:48Z",
        "description": "initializing VM",
        "endTime": "2019-04-02T19:46:43.239654524Z"
      }],
      "backendLogs": {
        "log": "gs://gbsc-gcp-project-hummingbird-user-xingziye/atac/b5e931fc-22e5-4c60-844b-0333ab0bf47e/call-macs2_pr2/shard-0/macs2_pr2-0.log"
      },
      "start": "2019-04-02T12:45:12.293-07:00"
    }],
    "atac.overlap_pr": [{
      "preemptible": false,
      "executionStatus": "Done",
      "stdout": "gs://gbsc-gcp-project-hummingbird-user-xingziye/atac/b5e931fc-22e5-4c60-844b-0333ab0bf47e/call-overlap_pr/shard-0/stdout",
      "backendStatus": "Success",
      "shardIndex": 0,
      "jes": {
        "endpointUrl": "https://genomics.googleapis.com/",
        "machineType": "us-central1-b/n1-standard-2",
        "googleProject": "gbsc-gcp-project-cba",
        "executionBucket": "gs://gbsc-gcp-project-hummingbird-user-xingziye",
        "zone": "us-central1-b",
        "instanceName": "ggp-3717583339840021686"
      },
      "outputs": {
        "bfilt_overlap_peak": "gs://gbsc-gcp-project-hummingbird-user-xingziye/atac/b5e931fc-22e5-4c60-844b-0333ab0bf47e/call-overlap_pr/shard-0/glob-2e6c87fc90e45fa5dbda88934d454cd3/rep1-pr.overlap.bfilt.narrowPeak.gz",
        "bfilt_overlap_peak_hammock": ["gs://gbsc-gcp-project-hummingbird-user-xingziye/atac/b5e931fc-22e5-4c60-844b-0333ab0bf47e/call-overlap_pr/shard-0/glob-08ed81b9c4c9ccf6c3692d9ea29b11e0/rep1-pr.overlap.bfilt.narrowPeak.hammock.gz", "gs://gbsc-gcp-project-hummingbird-user-xingziye/atac/b5e931fc-22e5-4c60-844b-0333ab0bf47e/call-overlap_pr/shard-0/glob-08ed81b9c4c9ccf6c3692d9ea29b11e0/rep1-pr.overlap.bfilt.narrowPeak.hammock.gz.tbi"],
        "frip_qc": "gs://gbsc-gcp-project-hummingbird-user-xingziye/atac/b5e931fc-22e5-4c60-844b-0333ab0bf47e/call-overlap_pr/shard-0/glob-156b027b56a0fc9230201b265d9f4bf4/rep1-pr.overlap.bfilt.frip.qc",
        "overlap_peak": "gs://gbsc-gcp-project-hummingbird-user-xingziye/atac/b5e931fc-22e5-4c60-844b-0333ab0bf47e/call-overlap_pr/shard-0/glob-254907fcd430d7e6c9bf67ac4585adb4/rep1-pr.overlap.narrowPeak.gz",
        "bfilt_overlap_peak_bb": "gs://gbsc-gcp-project-hummingbird-user-xingziye/atac/b5e931fc-22e5-4c60-844b-0333ab0bf47e/call-overlap_pr/shard-0/glob-155eada107f68a2195912a39f5dee4bc/rep1-pr.overlap.bfilt.narrowPeak.bb"
      },
      "runtimeAttributes": {
        "preemptible": "0",
        "failOnStderr": "false",
        "bootDiskSizeGb": "10",
        "disks": "local-disk 50 HDD",
        "continueOnReturnCode": "0",
        "docker": "quay.io/encode-dcc/atac-seq-pipeline:v1.1.3",
        "maxRetries": "0",
        "cpu": "1",
        "cpuMin": "1",
        "noAddress": "false",
        "zones": "us-central1-b",
        "memoryMin": "2048.0 MB",
        "memory": "4000.0 MB"
      },
      "callCaching": {
        "effectiveCallCachingMode": "CallCachingOff",
        "allowResultReuse": false
      },
      "inputs": {
        "blacklist": "gs://encode-pipeline-genome-data/hg38/hg38.blacklist.bed.gz",
        "peak_type": "narrowPeak",
        "ta": "gs://gbsc-gcp-project-hummingbird-user-xingziye/atac/b5e931fc-22e5-4c60-844b-0333ab0bf47e/call-bam2ta/shard-0/glob-199637d3015dccbe277f621a18be9eb4/ENCFF341MYG.subsampled.400.trim.merged.nodup.tn5.tagAlign.gz",
        "prefix": "rep1-pr",
        "peak2": "gs://gbsc-gcp-project-hummingbird-user-xingziye/atac/b5e931fc-22e5-4c60-844b-0333ab0bf47e/call-macs2_pr2/shard-0/glob-254907fcd430d7e6c9bf67ac4585adb4/ENCFF341MYG.subsampled.400.trim.merged.nodup.tn5.pr2.pval0.01.300K.narrowPeak.gz",
        "chrsz": "gs://encode-pipeline-genome-data/hg38/hg38.chrom.sizes",
        "keep_irregular_chr_in_bfilt_peak": false,
        "peak1": "gs://gbsc-gcp-project-hummingbird-user-xingziye/atac/b5e931fc-22e5-4c60-844b-0333ab0bf47e/call-macs2_pr1/shard-0/glob-254907fcd430d7e6c9bf67ac4585adb4/ENCFF341MYG.subsampled.400.trim.merged.nodup.tn5.pr1.pval0.01.300K.narrowPeak.gz",
        "peak_pooled": "gs://gbsc-gcp-project-hummingbird-user-xingziye/atac/b5e931fc-22e5-4c60-844b-0333ab0bf47e/call-macs2/shard-0/glob-254907fcd430d7e6c9bf67ac4585adb4/ENCFF341MYG.subsampled.400.trim.merged.nodup.tn5.pval0.01.300K.narrowPeak.gz"
      },
      "backendLabels": {
        "wdl-task-name": "overlap",
        "cromwell-workflow-id": "cromwell-b5e931fc-22e5-4c60-844b-0333ab0bf47e",
        "wdl-call-alias": "overlap-pr"
      },
      "returnCode": 0,
      "labels": {
        "wdl-call-alias": "overlap_pr",
        "wdl-task-name": "overlap",
        "cromwell-workflow-id": "cromwell-b5e931fc-22e5-4c60-844b-0333ab0bf47e"
      },
      "jobId": "operations/ELLtgP2dLRi2yczQncvgyzMg6_2gxpcfKg9wcm9kdWN0aW9uUXVldWU",
      "backend": "PAPIv2",
      "end": "2019-04-02T13:00:15.479-07:00",
      "dockerImageUsed": "quay.io/encode-dcc/atac-seq-pipeline@sha256:ff3992deeefa7ac10fe633adae9369225643e5e922a68e465178c0be63039787",
      "stderr": "gs://gbsc-gcp-project-hummingbird-user-xingziye/atac/b5e931fc-22e5-4c60-844b-0333ab0bf47e/call-overlap_pr/shard-0/stderr",
      "callRoot": "gs://gbsc-gcp-project-hummingbird-user-xingziye/atac/b5e931fc-22e5-4c60-844b-0333ab0bf47e/call-overlap_pr/shard-0",
      "attempt": 1,
      "executionEvents": [{
        "endTime": "2019-04-02T13:00:15.479-07:00",
        "startTime": "2019-04-02T13:00:15.479-07:00",
        "description": "UpdatingJobStore"
      }, {
        "startTime": "2019-04-02T20:00:00.386647590Z",
        "endTime": "2019-04-02T20:00:00.386647590Z",
        "description": "ok"
      }, {
        "startTime": "2019-04-02T12:56:25.804-07:00",
        "description": "PreparingJob",
        "endTime": "2019-04-02T12:56:25.814-07:00"
      }, {
        "startTime": "2019-04-02T12:56:25.575-07:00",
        "description": "RequestingExecutionToken",
        "endTime": "2019-04-02T12:56:25.803-07:00"
      }, {
        "description": "start",
        "startTime": "2019-04-02T19:57:21.233627600Z",
        "endTime": "2019-04-02T19:57:21.233692655Z"
      }, {
        "startTime": "2019-04-02T19:59:26.218669123Z",
        "description": "localizing-files",
        "endTime": "2019-04-02T19:59:34.576799767Z"
      }, {
        "description": "WaitingForValueStore",
        "endTime": "2019-04-02T12:56:25.804-07:00",
        "startTime": "2019-04-02T12:56:25.803-07:00"
      }, {
        "endTime": "2019-04-02T19:59:40.090351448Z",
        "startTime": "2019-04-02T19:59:34.576799767Z",
        "description": "running-docker"
      }, {
        "description": "waiting for quota",
        "endTime": "2019-04-02T19:56:58Z",
        "startTime": "2019-04-02T19:56:52Z"
      }, {
        "endTime": "2019-04-02T19:59:26.218669123Z",
        "description": "pulling-image",
        "startTime": "2019-04-02T19:57:21.233692655Z"
      }, {
        "endTime": "2019-04-02T19:56:52Z",
        "description": "RunningJob",
        "startTime": "2019-04-02T12:56:25.814-07:00"
      }, {
        "endTime": "2019-04-02T20:00:00.386647590Z",
        "startTime": "2019-04-02T19:59:40.090351448Z",
        "description": "delocalizing-files"
      }, {
        "endTime": "2019-04-02T12:56:25.575-07:00",
        "startTime": "2019-04-02T12:56:25.575-07:00",
        "description": "Pending"
      }, {
        "description": "initializing VM",
        "endTime": "2019-04-02T19:57:21.233627600Z",
        "startTime": "2019-04-02T19:56:58Z"
      }, {
        "description": "cromwell poll interval",
        "endTime": "2019-04-02T13:00:15.479-07:00",
        "startTime": "2019-04-02T20:00:00.386647590Z"
      }],
      "backendLogs": {
        "log": "gs://gbsc-gcp-project-hummingbird-user-xingziye/atac/b5e931fc-22e5-4c60-844b-0333ab0bf47e/call-overlap_pr/shard-0/overlap_pr-0.log"
      },
      "start": "2019-04-02T12:56:25.574-07:00"
    }],
    "atac.reproducibility_overlap": [{
      "preemptible": false,
      "executionStatus": "Done",
      "stdout": "gs://gbsc-gcp-project-hummingbird-user-xingziye/atac/b5e931fc-22e5-4c60-844b-0333ab0bf47e/call-reproducibility_overlap/stdout",
      "backendStatus": "Success",
      "shardIndex": -1,
      "jes": {
        "endpointUrl": "https://genomics.googleapis.com/",
        "machineType": "us-central1-b/n1-standard-2",
        "googleProject": "gbsc-gcp-project-cba",
        "executionBucket": "gs://gbsc-gcp-project-hummingbird-user-xingziye",
        "zone": "us-central1-b",
        "instanceName": "ggp-13416551689390176739"
      },
      "outputs": {
        "conservative_peak_bb": "gs://gbsc-gcp-project-hummingbird-user-xingziye/atac/b5e931fc-22e5-4c60-844b-0333ab0bf47e/call-reproducibility_overlap/glob-c12e49ae1deb87ae04019b575ae1ffe9/conservative_peak.narrowPeak.bb",
        "optimal_peak_bb": "gs://gbsc-gcp-project-hummingbird-user-xingziye/atac/b5e931fc-22e5-4c60-844b-0333ab0bf47e/call-reproducibility_overlap/glob-6150deffcc38df7a1bcd007f08a547cd/optimal_peak.narrowPeak.bb",
        "conservative_peak": "gs://gbsc-gcp-project-hummingbird-user-xingziye/atac/b5e931fc-22e5-4c60-844b-0333ab0bf47e/call-reproducibility_overlap/glob-36cf81502378ee37df0cd582affc8739/conservative_peak.narrowPeak.gz",
        "conservative_peak_hammock": [],
        "optimal_peak": "gs://gbsc-gcp-project-hummingbird-user-xingziye/atac/b5e931fc-22e5-4c60-844b-0333ab0bf47e/call-reproducibility_overlap/glob-d4142e5b6299782081eeeebbe4d87b3e/optimal_peak.narrowPeak.gz",
        "optimal_peak_hammock": ["gs://gbsc-gcp-project-hummingbird-user-xingziye/atac/b5e931fc-22e5-4c60-844b-0333ab0bf47e/call-reproducibility_overlap/glob-20739e0bbc74c608c3d7e58e1e75f2f7/optimal_peak.narrowPeak.hammock.gz", "gs://gbsc-gcp-project-hummingbird-user-xingziye/atac/b5e931fc-22e5-4c60-844b-0333ab0bf47e/call-reproducibility_overlap/glob-20739e0bbc74c608c3d7e58e1e75f2f7/optimal_peak.narrowPeak.hammock.gz.tbi"],
        "reproducibility_qc": "gs://gbsc-gcp-project-hummingbird-user-xingziye/atac/b5e931fc-22e5-4c60-844b-0333ab0bf47e/call-reproducibility_overlap/glob-2e0755477c7b64fb4cd35cd75c0b0f2a/overlap.reproducibility.qc"
      },
      "runtimeAttributes": {
        "preemptible": "0",
        "failOnStderr": "false",
        "bootDiskSizeGb": "10",
        "disks": "local-disk 50 HDD",
        "continueOnReturnCode": "0",
        "docker": "quay.io/encode-dcc/atac-seq-pipeline:v1.1.3",
        "maxRetries": "0",
        "cpu": "1",
        "cpuMin": "1",
        "noAddress": "false",
        "zones": "us-central1-b",
        "memoryMin": "2048.0 MB",
        "memory": "4000.0 MB"
      },
      "callCaching": {
        "allowResultReuse": false,
        "effectiveCallCachingMode": "CallCachingOff"
      },
      "inputs": {
        "peak_type": "narrowPeak",
        "peaks_pr": ["gs://gbsc-gcp-project-hummingbird-user-xingziye/atac/b5e931fc-22e5-4c60-844b-0333ab0bf47e/call-overlap_pr/shard-0/glob-2e6c87fc90e45fa5dbda88934d454cd3/rep1-pr.overlap.bfilt.narrowPeak.gz"],
        "prefix": "overlap",
        "chrsz": "gs://encode-pipeline-genome-data/hg38/hg38.chrom.sizes",
        "keep_irregular_chr_in_bfilt_peak": false,
        "peak_ppr": null,
        "peaks": []
      },
      "backendLabels": {
        "wdl-call-alias": "reproducibility-overlap",
        "wdl-task-name": "reproducibility",
        "cromwell-workflow-id": "cromwell-b5e931fc-22e5-4c60-844b-0333ab0bf47e"
      },
      "returnCode": 0,
      "labels": {
        "wdl-call-alias": "reproducibility_overlap",
        "cromwell-workflow-id": "cromwell-b5e931fc-22e5-4c60-844b-0333ab0bf47e",
        "wdl-task-name": "reproducibility"
      },
      "jobId": "operations/EN6Xj_2dLRjj85Km19XKmLoBIOv9oMaXHyoPcHJvZHVjdGlvblF1ZXVl",
      "backend": "PAPIv2",
      "end": "2019-04-02T13:04:10.105-07:00",
      "dockerImageUsed": "quay.io/encode-dcc/atac-seq-pipeline@sha256:ff3992deeefa7ac10fe633adae9369225643e5e922a68e465178c0be63039787",
      "stderr": "gs://gbsc-gcp-project-hummingbird-user-xingziye/atac/b5e931fc-22e5-4c60-844b-0333ab0bf47e/call-reproducibility_overlap/stderr",
      "callRoot": "gs://gbsc-gcp-project-hummingbird-user-xingziye/atac/b5e931fc-22e5-4c60-844b-0333ab0bf47e/call-reproducibility_overlap",
      "attempt": 1,
      "executionEvents": [{
        "endTime": "2019-04-02T13:04:10.105-07:00",
        "startTime": "2019-04-02T20:03:35.600687488Z",
        "description": "cromwell poll interval"
      }, {
        "description": "ok",
        "startTime": "2019-04-02T20:03:35.600687488Z",
        "endTime": "2019-04-02T20:03:35.600687488Z"
      }, {
        "description": "start",
        "endTime": "2019-04-02T20:01:16.040179953Z",
        "startTime": "2019-04-02T20:01:16.040086492Z"
      }, {
        "endTime": "2019-04-02T13:00:18.810-07:00",
        "description": "PreparingJob",
        "startTime": "2019-04-02T13:00:18.807-07:00"
      }, {
        "startTime": "2019-04-02T20:03:05.601427253Z",
        "endTime": "2019-04-02T20:03:10.022473764Z",
        "description": "localizing-files"
      }, {
        "endTime": "2019-04-02T13:00:18.141-07:00",
        "startTime": "2019-04-02T13:00:18.141-07:00",
        "description": "Pending"
      }, {
        "description": "initializing VM",
        "startTime": "2019-04-02T20:00:52Z",
        "endTime": "2019-04-02T20:01:16.040086492Z"
      }, {
        "endTime": "2019-04-02T13:00:18.807-07:00",
        "startTime": "2019-04-02T13:00:18.806-07:00",
        "description": "WaitingForValueStore"
      }, {
        "endTime": "2019-04-02T13:04:10.105-07:00",
        "description": "UpdatingJobStore",
        "startTime": "2019-04-02T13:04:10.105-07:00"
      }, {
        "endTime": "2019-04-02T20:03:35.600687488Z",
        "description": "delocalizing-files",
        "startTime": "2019-04-02T20:03:14.272877488Z"
      }, {
        "description": "RequestingExecutionToken",
        "endTime": "2019-04-02T13:00:18.806-07:00",
        "startTime": "2019-04-02T13:00:18.141-07:00"
      }, {
        "startTime": "2019-04-02T20:00:47Z",
        "description": "waiting for quota",
        "endTime": "2019-04-02T20:00:52Z"
      }, {
        "endTime": "2019-04-02T20:00:47Z",
        "startTime": "2019-04-02T13:00:18.810-07:00",
        "description": "RunningJob"
      }, {
        "startTime": "2019-04-02T20:03:10.022473764Z",
        "description": "running-docker",
        "endTime": "2019-04-02T20:03:14.272877488Z"
      }, {
        "description": "pulling-image",
        "endTime": "2019-04-02T20:03:05.601427253Z",
        "startTime": "2019-04-02T20:01:16.040179953Z"
      }],
      "backendLogs": {
        "log": "gs://gbsc-gcp-project-hummingbird-user-xingziye/atac/b5e931fc-22e5-4c60-844b-0333ab0bf47e/call-reproducibility_overlap/reproducibility_overlap.log"
      },
      "start": "2019-04-02T13:00:18.141-07:00"
    }],
    "atac.filter": [{
      "preemptible": false,
      "executionStatus": "Done",
      "stdout": "gs://gbsc-gcp-project-hummingbird-user-xingziye/atac/b5e931fc-22e5-4c60-844b-0333ab0bf47e/call-filter/shard-0/stdout",
      "backendStatus": "Success",
      "shardIndex": 0,
      "jes": {
        "endpointUrl": "https://genomics.googleapis.com/",
        "machineType": "us-central1-b/n1-standard-4",
        "googleProject": "gbsc-gcp-project-cba",
        "executionBucket": "gs://gbsc-gcp-project-hummingbird-user-xingziye",
        "zone": "us-central1-b",
        "instanceName": "ggp-16498682221950485076"
      },
      "outputs": {
        "dup_qc": "gs://gbsc-gcp-project-hummingbird-user-xingziye/atac/b5e931fc-22e5-4c60-844b-0333ab0bf47e/call-filter/shard-0/glob-1b4794e80f740fd50137e3a948d7ba79/ENCFF341MYG.subsampled.400.trim.merged.dup.qc",
        "flagstat_qc": "gs://gbsc-gcp-project-hummingbird-user-xingziye/atac/b5e931fc-22e5-4c60-844b-0333ab0bf47e/call-filter/shard-0/glob-e2a84eed5523fc4955f617236139026c/ENCFF341MYG.subsampled.400.trim.merged.nodup.flagstat.qc",
        "nodup_bai": "gs://gbsc-gcp-project-hummingbird-user-xingziye/atac/b5e931fc-22e5-4c60-844b-0333ab0bf47e/call-filter/shard-0/glob-6efbc60cb1e0959bab4e467327a9416c/ENCFF341MYG.subsampled.400.trim.merged.filt.bam.bai",
        "nodup_bam": "gs://gbsc-gcp-project-hummingbird-user-xingziye/atac/b5e931fc-22e5-4c60-844b-0333ab0bf47e/call-filter/shard-0/glob-3bcbe4e7489c90f75e0523ac6f3a9385/ENCFF341MYG.subsampled.400.trim.merged.nodup.bam",
        "pbc_qc": "gs://gbsc-gcp-project-hummingbird-user-xingziye/atac/b5e931fc-22e5-4c60-844b-0333ab0bf47e/call-filter/shard-0/glob-85baf8309ae5456274184b199e3a7924/ENCFF341MYG.subsampled.400.trim.merged.dupmark.pbc.qc",
        "mito_dup_log": "gs://gbsc-gcp-project-hummingbird-user-xingziye/atac/b5e931fc-22e5-4c60-844b-0333ab0bf47e/call-filter/shard-0/glob-464553c80b37704e09c623386a14d01f/ENCFF341MYG.subsampled.400.trim.merged.dupmark.mito_dup.txt"
      },
      "runtimeAttributes": {
        "preemptible": "0",
        "failOnStderr": "false",
        "bootDiskSizeGb": "10",
        "disks": "local-disk 100 HDD",
        "continueOnReturnCode": "0",
        "docker": "quay.io/encode-dcc/atac-seq-pipeline:v1.1.3",
        "maxRetries": "0",
        "cpu": "4",
        "cpuMin": "1",
        "noAddress": "false",
        "zones": "us-central1-b",
        "memoryMin": "2048.0 MB",
        "memory": "12000.0 MB"
      },
      "callCaching": {
        "effectiveCallCachingMode": "CallCachingOff",
        "allowResultReuse": false
      },
      "inputs": {
        "multimapping": 4,
        "no_dup_removal": false,
        "mem_mb": 12000,
        "time_hr": 24,
        "disks": "local-disk 100 HDD",
        "mapq_thresh": 30,
        "cpu": 4,
        "paired_end": true,
        "dup_marker": "picard",
        "bam": "gs://gbsc-gcp-project-hummingbird-user-xingziye/atac/b5e931fc-22e5-4c60-844b-0333ab0bf47e/call-bowtie2/shard-0/glob-3bcbe4e7489c90f75e0523ac6f3a9385/ENCFF341MYG.subsampled.400.trim.merged.bam"
      },
      "backendLabels": {
        "cromwell-workflow-id": "cromwell-b5e931fc-22e5-4c60-844b-0333ab0bf47e",
        "wdl-task-name": "filter"
      },
      "returnCode": 0,
      "labels": {
        "wdl-task-name": "filter",
        "cromwell-workflow-id": "cromwell-b5e931fc-22e5-4c60-844b-0333ab0bf47e"
      },
      "jobId": "operations/ENjpoPydLRjUhKXrkoLG--QBIOv9oMaXHyoPcHJvZHVjdGlvblF1ZXVl",
      "backend": "PAPIv2",
      "end": "2019-04-02T12:36:15.905-07:00",
      "dockerImageUsed": "quay.io/encode-dcc/atac-seq-pipeline@sha256:ff3992deeefa7ac10fe633adae9369225643e5e922a68e465178c0be63039787",
      "stderr": "gs://gbsc-gcp-project-hummingbird-user-xingziye/atac/b5e931fc-22e5-4c60-844b-0333ab0bf47e/call-filter/shard-0/stderr",
      "callRoot": "gs://gbsc-gcp-project-hummingbird-user-xingziye/atac/b5e931fc-22e5-4c60-844b-0333ab0bf47e/call-filter/shard-0",
      "attempt": 1,
      "executionEvents": [{
        "description": "localizing-files",
        "endTime": "2019-04-02T19:35:07.140968087Z",
        "startTime": "2019-04-02T19:35:02.779483274Z"
      }, {
        "startTime": "2019-04-02T19:35:07.140968087Z",
        "endTime": "2019-04-02T19:35:33.710803298Z",
        "description": "running-docker"
      }, {
        "startTime": "2019-04-02T12:30:13.546-07:00",
        "description": "Pending",
        "endTime": "2019-04-02T12:30:13.546-07:00"
      }, {
        "description": "initializing VM",
        "startTime": "2019-04-02T19:30:43Z",
        "endTime": "2019-04-02T19:31:57.243341773Z"
      }, {
        "endTime": "2019-04-02T12:36:15.905-07:00",
        "startTime": "2019-04-02T12:36:15.905-07:00",
        "description": "UpdatingJobStore"
      }, {
        "startTime": "2019-04-02T19:30:39Z",
        "description": "waiting for quota",
        "endTime": "2019-04-02T19:30:43Z"
      }, {
        "startTime": "2019-04-02T19:31:57.243461104Z",
        "description": "pulling-image",
        "endTime": "2019-04-02T19:35:02.779483274Z"
      }, {
        "endTime": "2019-04-02T19:35:56Z",
        "description": "ok",
        "startTime": "2019-04-02T19:35:55.814910719Z"
      }, {
        "startTime": "2019-04-02T12:30:13.753-07:00",
        "description": "WaitingForValueStore",
        "endTime": "2019-04-02T12:30:13.753-07:00"
      }, {
        "endTime": "2019-04-02T12:36:15.905-07:00",
        "startTime": "2019-04-02T19:35:56Z",
        "description": "cromwell poll interval"
      }, {
        "endTime": "2019-04-02T19:35:55.814910719Z",
        "description": "delocalizing-files",
        "startTime": "2019-04-02T19:35:33.710803298Z"
      }, {
        "endTime": "2019-04-02T19:30:39Z",
        "startTime": "2019-04-02T12:30:13.759-07:00",
        "description": "RunningJob"
      }, {
        "endTime": "2019-04-02T12:30:13.753-07:00",
        "startTime": "2019-04-02T12:30:13.546-07:00",
        "description": "RequestingExecutionToken"
      }, {
        "endTime": "2019-04-02T12:30:13.759-07:00",
        "startTime": "2019-04-02T12:30:13.753-07:00",
        "description": "PreparingJob"
      }, {
        "startTime": "2019-04-02T19:31:57.243341773Z",
        "description": "start",
        "endTime": "2019-04-02T19:31:57.243461104Z"
      }],
      "backendLogs": {
        "log": "gs://gbsc-gcp-project-hummingbird-user-xingziye/atac/b5e931fc-22e5-4c60-844b-0333ab0bf47e/call-filter/shard-0/filter-0.log"
      },
      "start": "2019-04-02T12:30:13.546-07:00"
    }],
    "atac.qc_report": [{
      "preemptible": false,
      "executionStatus": "Done",
      "stdout": "gs://gbsc-gcp-project-hummingbird-user-xingziye/atac/b5e931fc-22e5-4c60-844b-0333ab0bf47e/call-qc_report/stdout",
      "backendStatus": "Success",
      "shardIndex": -1,
      "jes": {
        "endpointUrl": "https://genomics.googleapis.com/",
        "machineType": "us-central1-b/n1-standard-2",
        "googleProject": "gbsc-gcp-project-cba",
        "executionBucket": "gs://gbsc-gcp-project-hummingbird-user-xingziye",
        "zone": "us-central1-b",
        "instanceName": "ggp-1421007743538925257"
      },
      "outputs": {
        "qc_json_match": false,
        "report": "gs://gbsc-gcp-project-hummingbird-user-xingziye/atac/b5e931fc-22e5-4c60-844b-0333ab0bf47e/call-qc_report/glob-eae855c82d0f7e2185388856e7b2cc7b/qc.html",
        "qc_json": "gs://gbsc-gcp-project-hummingbird-user-xingziye/atac/b5e931fc-22e5-4c60-844b-0333ab0bf47e/call-qc_report/glob-3440f922973abb7a616aaf203e0db08b/qc.json"
      },
      "runtimeAttributes": {
        "preemptible": "0",
        "failOnStderr": "false",
        "bootDiskSizeGb": "10",
        "disks": "local-disk 50 HDD",
        "continueOnReturnCode": "0",
        "docker": "quay.io/encode-dcc/atac-seq-pipeline:v1.1.3",
        "maxRetries": "0",
        "cpu": "1",
        "cpuMin": "1",
        "noAddress": "false",
        "zones": "us-central1-b",
        "memoryMin": "2048.0 MB",
        "memory": "4000.0 MB"
      },
      "callCaching": {
        "allowResultReuse": false,
        "effectiveCallCachingMode": "CallCachingOff"
      },
      "inputs": {
        "macs2_cap_num_peak": 300000,
        "frip_macs2_qcs_pr1": ["gs://gbsc-gcp-project-hummingbird-user-xingziye/atac/b5e931fc-22e5-4c60-844b-0333ab0bf47e/call-macs2_pr1/shard-0/glob-156b027b56a0fc9230201b265d9f4bf4/ENCFF341MYG.subsampled.400.trim.merged.nodup.tn5.pr1.pval0.01.300K.bfilt.frip.qc"],
        "overlap_reproducibility_qc": "gs://gbsc-gcp-project-hummingbird-user-xingziye/atac/b5e931fc-22e5-4c60-844b-0333ab0bf47e/call-reproducibility_overlap/glob-2e0755477c7b64fb4cd35cd75c0b0f2a/overlap.reproducibility.qc",
        "frip_overlap_qcs": [],
        "frip_macs2_qc_ppr2": null,
        "frip_idr_qcs_pr": ["gs://gbsc-gcp-project-hummingbird-user-xingziye/atac/b5e931fc-22e5-4c60-844b-0333ab0bf47e/call-idr_pr/shard-0/glob-156b027b56a0fc9230201b265d9f4bf4/rep1-pr.idr0.05.bfilt.frip.qc"],
        "frip_idr_qc_ppr": null,
        "idr_reproducibility_qc": "gs://gbsc-gcp-project-hummingbird-user-xingziye/atac/b5e931fc-22e5-4c60-844b-0333ab0bf47e/call-reproducibility_idr/glob-2e0755477c7b64fb4cd35cd75c0b0f2a/idr.reproducibility.qc",
        "multimapping": 4,
        "frip_macs2_qcs": ["gs://gbsc-gcp-project-hummingbird-user-xingziye/atac/b5e931fc-22e5-4c60-844b-0333ab0bf47e/call-macs2/shard-0/glob-156b027b56a0fc9230201b265d9f4bf4/ENCFF341MYG.subsampled.400.trim.merged.nodup.tn5.pval0.01.300K.bfilt.frip.qc"],
        "description": "ATAC-seq on primary keratinocytes in day 0.0 of differentiation",
        "pipeline_type": "atac",
        "idr_plot_ppr": null,
        "frip_macs2_qc_pooled": null,
        "flagstat_qcs": ["gs://gbsc-gcp-project-hummingbird-user-xingziye/atac/b5e931fc-22e5-4c60-844b-0333ab0bf47e/call-bowtie2/shard-0/glob-e2a84eed5523fc4955f617236139026c/ENCFF341MYG.subsampled.400.trim.merged.flagstat.qc"],
        "dup_qcs": ["gs://gbsc-gcp-project-hummingbird-user-xingziye/atac/b5e931fc-22e5-4c60-844b-0333ab0bf47e/call-filter/shard-0/glob-1b4794e80f740fd50137e3a948d7ba79/ENCFF341MYG.subsampled.400.trim.merged.dup.qc"],
        "idr_thresh": 0.05,
        "qc_json_ref": "gs://encode-pipeline-test-samples/encode-atac-seq-pipeline/ref_output/v1.1.6/ENCSR356KRQ/qc.json",
        "xcor_scores": ["gs://gbsc-gcp-project-hummingbird-user-xingziye/atac/b5e931fc-22e5-4c60-844b-0333ab0bf47e/call-xcor/shard-0/glob-75e08482e6a5fe7a0d0013bbdfdf694c/ENCFF341MYG.subsampled.400.trim.merged.nodup.tn5.no_chrM.R1.25M.cc.qc"],
        "frip_overlap_qc_ppr": null,
        "pbc_qcs": ["gs://gbsc-gcp-project-hummingbird-user-xingziye/atac/b5e931fc-22e5-4c60-844b-0333ab0bf47e/call-filter/shard-0/glob-85baf8309ae5456274184b199e3a7924/ENCFF341MYG.subsampled.400.trim.merged.dupmark.pbc.qc"],
        "spp_cap_num_peak": null,
        "xcor_plots": ["gs://gbsc-gcp-project-hummingbird-user-xingziye/atac/b5e931fc-22e5-4c60-844b-0333ab0bf47e/call-xcor/shard-0/glob-c0eba07eee633b4055d7d9d85813fdf5/ENCFF341MYG.subsampled.400.trim.merged.nodup.tn5.no_chrM.R1.25M.cc.plot.png"],
        "nodup_flagstat_qcs": ["gs://gbsc-gcp-project-hummingbird-user-xingziye/atac/b5e931fc-22e5-4c60-844b-0333ab0bf47e/call-filter/shard-0/glob-e2a84eed5523fc4955f617236139026c/ENCFF341MYG.subsampled.400.trim.merged.nodup.flagstat.qc"],
        "idr_plots_pr": ["gs://gbsc-gcp-project-hummingbird-user-xingziye/atac/b5e931fc-22e5-4c60-844b-0333ab0bf47e/call-idr_pr/shard-0/glob-8da83e7748d9e54f3e082eb4aa171757/rep1-pr.idr0.05.unthresholded-peaks.txt.png"],
        "paired_end": true,
        "ataqc_htmls": ["gs://gbsc-gcp-project-hummingbird-user-xingziye/atac/b5e931fc-22e5-4c60-844b-0333ab0bf47e/call-ataqc/shard-0/glob-47eccad02a94d57a391dcc7587d65007/ENCFF341MYG.subsampled.400.trim.merged_qc.html"],
        "frip_overlap_qcs_pr": ["gs://gbsc-gcp-project-hummingbird-user-xingziye/atac/b5e931fc-22e5-4c60-844b-0333ab0bf47e/call-overlap_pr/shard-0/glob-156b027b56a0fc9230201b265d9f4bf4/rep1-pr.overlap.bfilt.frip.qc"],
        "title": "ENCSR356KRQ_1M",
        "peak_caller": "macs2",
        "ataqc_txts": ["gs://gbsc-gcp-project-hummingbird-user-xingziye/atac/b5e931fc-22e5-4c60-844b-0333ab0bf47e/call-ataqc/shard-0/glob-add762cb3e49a6937f1540db118fa0c8/ENCFF341MYG.subsampled.400.trim.merged_qc.txt"],
        "frip_macs2_qcs_pr2": ["gs://gbsc-gcp-project-hummingbird-user-xingziye/atac/b5e931fc-22e5-4c60-844b-0333ab0bf47e/call-macs2_pr2/shard-0/glob-156b027b56a0fc9230201b265d9f4bf4/ENCFF341MYG.subsampled.400.trim.merged.nodup.tn5.pr2.pval0.01.300K.bfilt.frip.qc"],
        "frip_macs2_qc_ppr1": null,
        "frip_idr_qcs": [],
        "idr_plots": []
      },
      "backendLabels": {
        "cromwell-workflow-id": "cromwell-b5e931fc-22e5-4c60-844b-0333ab0bf47e",
        "wdl-task-name": "qc-report"
      },
      "returnCode": 0,
      "labels": {
        "cromwell-workflow-id": "cromwell-b5e931fc-22e5-4c60-844b-0333ab0bf47e",
        "wdl-task-name": "qc_report"
      },
      "jobId": "operations/EMvY2v2dLRjJnd6FueCb3BMg6_2gxpcfKg9wcm9kdWN0aW9uUXVldWU",
      "backend": "PAPIv2",
      "end": "2019-04-02T13:24:46.830-07:00",
      "dockerImageUsed": "quay.io/encode-dcc/atac-seq-pipeline@sha256:ff3992deeefa7ac10fe633adae9369225643e5e922a68e465178c0be63039787",
      "stderr": "gs://gbsc-gcp-project-hummingbird-user-xingziye/atac/b5e931fc-22e5-4c60-844b-0333ab0bf47e/call-qc_report/stderr",
      "callRoot": "gs://gbsc-gcp-project-hummingbird-user-xingziye/atac/b5e931fc-22e5-4c60-844b-0333ab0bf47e/call-qc_report",
      "attempt": 1,
      "executionEvents": [{
        "endTime": "2019-04-02T13:20:55.856-07:00",
        "description": "PreparingJob",
        "startTime": "2019-04-02T13:20:55.850-07:00"
      }, {
        "endTime": "2019-04-02T20:23:49.974740918Z",
        "startTime": "2019-04-02T20:21:50.796385346Z",
        "description": "pulling-image"
      }, {
        "startTime": "2019-04-02T20:24:12.739956125Z",
        "description": "running-docker",
        "endTime": "2019-04-02T20:24:16.893980569Z"
      }, {
        "endTime": "2019-04-02T20:24:29.053017851Z",
        "startTime": "2019-04-02T20:24:16.893980569Z",
        "description": "delocalizing-files"
      }, {
        "endTime": "2019-04-02T13:24:46.830-07:00",
        "description": "UpdatingJobStore",
        "startTime": "2019-04-02T13:24:46.830-07:00"
      }, {
        "endTime": "2019-04-02T20:24:12.739956125Z",
        "description": "localizing-files",
        "startTime": "2019-04-02T20:23:49.974740918Z"
      }, {
        "startTime": "2019-04-02T13:20:55.441-07:00",
        "endTime": "2019-04-02T13:20:55.441-07:00",
        "description": "Pending"
      }, {
        "endTime": "2019-04-02T20:24:29.053017851Z",
        "description": "ok",
        "startTime": "2019-04-02T20:24:29.053017851Z"
      }, {
        "startTime": "2019-04-02T20:21:31Z",
        "endTime": "2019-04-02T20:21:50.796285246Z",
        "description": "initializing VM"
      }, {
        "description": "WaitingForValueStore",
        "startTime": "2019-04-02T13:20:55.850-07:00",
        "endTime": "2019-04-02T13:20:55.850-07:00"
      }, {
        "description": "RunningJob",
        "startTime": "2019-04-02T13:20:55.856-07:00",
        "endTime": "2019-04-02T20:21:24Z"
      }, {
        "description": "cromwell poll interval",
        "startTime": "2019-04-02T20:24:29.053017851Z",
        "endTime": "2019-04-02T13:24:46.830-07:00"
      }, {
        "endTime": "2019-04-02T20:21:31Z",
        "description": "waiting for quota",
        "startTime": "2019-04-02T20:21:24Z"
      }, {
        "description": "start",
        "endTime": "2019-04-02T20:21:50.796385346Z",
        "startTime": "2019-04-02T20:21:50.796285246Z"
      }, {
        "endTime": "2019-04-02T13:20:55.850-07:00",
        "startTime": "2019-04-02T13:20:55.441-07:00",
        "description": "RequestingExecutionToken"
      }],
      "backendLogs": {
        "log": "gs://gbsc-gcp-project-hummingbird-user-xingziye/atac/b5e931fc-22e5-4c60-844b-0333ab0bf47e/call-qc_report/qc_report.log"
      },
      "start": "2019-04-02T13:20:55.441-07:00"
    }],
    "atac.reproducibility_idr": [{
      "preemptible": false,
      "executionStatus": "Done",
      "stdout": "gs://gbsc-gcp-project-hummingbird-user-xingziye/atac/b5e931fc-22e5-4c60-844b-0333ab0bf47e/call-reproducibility_idr/stdout",
      "backendStatus": "Success",
      "shardIndex": -1,
      "jes": {
        "endpointUrl": "https://genomics.googleapis.com/",
        "machineType": "us-central1-b/n1-standard-2",
        "googleProject": "gbsc-gcp-project-cba",
        "executionBucket": "gs://gbsc-gcp-project-hummingbird-user-xingziye",
        "zone": "us-central1-b",
        "instanceName": "ggp-6243970985610633846"
      },
      "outputs": {
        "conservative_peak_bb": "gs://gbsc-gcp-project-hummingbird-user-xingziye/atac/b5e931fc-22e5-4c60-844b-0333ab0bf47e/call-reproducibility_idr/glob-c12e49ae1deb87ae04019b575ae1ffe9/conservative_peak.narrowPeak.bb",
        "optimal_peak_bb": "gs://gbsc-gcp-project-hummingbird-user-xingziye/atac/b5e931fc-22e5-4c60-844b-0333ab0bf47e/call-reproducibility_idr/glob-6150deffcc38df7a1bcd007f08a547cd/optimal_peak.narrowPeak.bb",
        "conservative_peak": "gs://gbsc-gcp-project-hummingbird-user-xingziye/atac/b5e931fc-22e5-4c60-844b-0333ab0bf47e/call-reproducibility_idr/glob-36cf81502378ee37df0cd582affc8739/conservative_peak.narrowPeak.gz",
        "conservative_peak_hammock": [],
        "optimal_peak": "gs://gbsc-gcp-project-hummingbird-user-xingziye/atac/b5e931fc-22e5-4c60-844b-0333ab0bf47e/call-reproducibility_idr/glob-d4142e5b6299782081eeeebbe4d87b3e/optimal_peak.narrowPeak.gz",
        "optimal_peak_hammock": ["gs://gbsc-gcp-project-hummingbird-user-xingziye/atac/b5e931fc-22e5-4c60-844b-0333ab0bf47e/call-reproducibility_idr/glob-20739e0bbc74c608c3d7e58e1e75f2f7/optimal_peak.narrowPeak.hammock.gz", "gs://gbsc-gcp-project-hummingbird-user-xingziye/atac/b5e931fc-22e5-4c60-844b-0333ab0bf47e/call-reproducibility_idr/glob-20739e0bbc74c608c3d7e58e1e75f2f7/optimal_peak.narrowPeak.hammock.gz.tbi"],
        "reproducibility_qc": "gs://gbsc-gcp-project-hummingbird-user-xingziye/atac/b5e931fc-22e5-4c60-844b-0333ab0bf47e/call-reproducibility_idr/glob-2e0755477c7b64fb4cd35cd75c0b0f2a/idr.reproducibility.qc"
      },
      "runtimeAttributes": {
        "preemptible": "0",
        "failOnStderr": "false",
        "bootDiskSizeGb": "10",
        "disks": "local-disk 50 HDD",
        "continueOnReturnCode": "0",
        "docker": "quay.io/encode-dcc/atac-seq-pipeline:v1.1.3",
        "maxRetries": "0",
        "cpu": "1",
        "cpuMin": "1",
        "noAddress": "false",
        "zones": "us-central1-b",
        "memoryMin": "2048.0 MB",
        "memory": "4000.0 MB"
      },
      "callCaching": {
        "allowResultReuse": false,
        "effectiveCallCachingMode": "CallCachingOff"
      },
      "inputs": {
        "peak_type": "narrowPeak",
        "peaks_pr": ["gs://gbsc-gcp-project-hummingbird-user-xingziye/atac/b5e931fc-22e5-4c60-844b-0333ab0bf47e/call-idr_pr/shard-0/glob-2e6c87fc90e45fa5dbda88934d454cd3/rep1-pr.idr0.05.bfilt.narrowPeak.gz"],
        "prefix": "idr",
        "chrsz": "gs://encode-pipeline-genome-data/hg38/hg38.chrom.sizes",
        "keep_irregular_chr_in_bfilt_peak": false,
        "peak_ppr": null,
        "peaks": []
      },
      "backendLabels": {
        "wdl-call-alias": "reproducibility-idr",
        "wdl-task-name": "reproducibility",
        "cromwell-workflow-id": "cromwell-b5e931fc-22e5-4c60-844b-0333ab0bf47e"
      },
      "returnCode": 0,
      "labels": {
        "wdl-call-alias": "reproducibility_idr",
        "wdl-task-name": "reproducibility",
        "cromwell-workflow-id": "cromwell-b5e931fc-22e5-4c60-844b-0333ab0bf47e"
      },
      "jobId": "operations/EKiplf2dLRj2xKvJ-NDC01Yg6_2gxpcfKg9wcm9kdWN0aW9uUXVldWU",
      "backend": "PAPIv2",
      "end": "2019-04-02T13:07:30.638-07:00",
      "dockerImageUsed": "quay.io/encode-dcc/atac-seq-pipeline@sha256:ff3992deeefa7ac10fe633adae9369225643e5e922a68e465178c0be63039787",
      "stderr": "gs://gbsc-gcp-project-hummingbird-user-xingziye/atac/b5e931fc-22e5-4c60-844b-0333ab0bf47e/call-reproducibility_idr/stderr",
      "callRoot": "gs://gbsc-gcp-project-hummingbird-user-xingziye/atac/b5e931fc-22e5-4c60-844b-0333ab0bf47e/call-reproducibility_idr",
      "attempt": 1,
      "executionEvents": [{
        "endTime": "2019-04-02T13:02:00.813-07:00",
        "startTime": "2019-04-02T13:02:00.141-07:00",
        "description": "RequestingExecutionToken"
      }, {
        "endTime": "2019-04-02T20:06:06.305430177Z",
        "description": "running-docker",
        "startTime": "2019-04-02T20:06:02.209357588Z"
      }, {
        "endTime": "2019-04-02T20:02:32Z",
        "startTime": "2019-04-02T20:02:28Z",
        "description": "waiting for quota"
      }, {
        "endTime": "2019-04-02T13:02:00.141-07:00",
        "description": "Pending",
        "startTime": "2019-04-02T13:02:00.141-07:00"
      }, {
        "endTime": "2019-04-02T20:06:02.209357588Z",
        "description": "localizing-files",
        "startTime": "2019-04-02T20:05:57.715257062Z"
      }, {
        "endTime": "2019-04-02T20:04:30.520468390Z",
        "description": "initializing VM",
        "startTime": "2019-04-02T20:02:32Z"
      }, {
        "endTime": "2019-04-02T20:04:30.520564079Z",
        "description": "start",
        "startTime": "2019-04-02T20:04:30.520468390Z"
      }, {
        "endTime": "2019-04-02T13:02:00.817-07:00",
        "description": "PreparingJob",
        "startTime": "2019-04-02T13:02:00.813-07:00"
      }, {
        "startTime": "2019-04-02T20:04:30.520564079Z",
        "endTime": "2019-04-02T20:05:57.715257062Z",
        "description": "pulling-image"
      }, {
        "endTime": "2019-04-02T13:07:30.638-07:00",
        "startTime": "2019-04-02T13:07:30.638-07:00",
        "description": "UpdatingJobStore"
      }, {
        "description": "WaitingForValueStore",
        "startTime": "2019-04-02T13:02:00.813-07:00",
        "endTime": "2019-04-02T13:02:00.813-07:00"
      }, {
        "endTime": "2019-04-02T13:07:30.638-07:00",
        "description": "cromwell poll interval",
        "startTime": "2019-04-02T20:06:27Z"
      }, {
        "endTime": "2019-04-02T20:06:26.872483604Z",
        "description": "delocalizing-files",
        "startTime": "2019-04-02T20:06:06.305430177Z"
      }, {
        "startTime": "2019-04-02T13:02:00.817-07:00",
        "endTime": "2019-04-02T20:02:28Z",
        "description": "RunningJob"
      }, {
        "endTime": "2019-04-02T20:06:27Z",
        "description": "ok",
        "startTime": "2019-04-02T20:06:26.872483604Z"
      }],
      "backendLogs": {
        "log": "gs://gbsc-gcp-project-hummingbird-user-xingziye/atac/b5e931fc-22e5-4c60-844b-0333ab0bf47e/call-reproducibility_idr/reproducibility_idr.log"
      },
      "start": "2019-04-02T13:02:00.140-07:00"
    }],
    "atac.macs2": [{
      "preemptible": false,
      "executionStatus": "Done",
      "stdout": "gs://gbsc-gcp-project-hummingbird-user-xingziye/atac/b5e931fc-22e5-4c60-844b-0333ab0bf47e/call-macs2/shard-0/stdout",
      "backendStatus": "Success",
      "shardIndex": 0,
      "jes": {
        "endpointUrl": "https://genomics.googleapis.com/",
        "machineType": "us-central1-b/n1-highmem-4",
        "googleProject": "gbsc-gcp-project-cba",
        "executionBucket": "gs://gbsc-gcp-project-hummingbird-user-xingziye",
        "zone": "us-central1-b",
        "instanceName": "ggp-6467636700199472964"
      },
      "outputs": {
        "sig_fc": "gs://gbsc-gcp-project-hummingbird-user-xingziye/atac/b5e931fc-22e5-4c60-844b-0333ab0bf47e/call-macs2/shard-0/glob-8876d8ced974dc46a0c7a4fac20a3a95/ENCFF341MYG.subsampled.400.trim.merged.nodup.tn5.fc.signal.bigwig",
        "bfilt_npeak": "gs://gbsc-gcp-project-hummingbird-user-xingziye/atac/b5e931fc-22e5-4c60-844b-0333ab0bf47e/call-macs2/shard-0/glob-2e6c87fc90e45fa5dbda88934d454cd3/ENCFF341MYG.subsampled.400.trim.merged.nodup.tn5.pval0.01.300K.bfilt.narrowPeak.gz",
        "bfilt_npeak_bb": "gs://gbsc-gcp-project-hummingbird-user-xingziye/atac/b5e931fc-22e5-4c60-844b-0333ab0bf47e/call-macs2/shard-0/glob-155eada107f68a2195912a39f5dee4bc/ENCFF341MYG.subsampled.400.trim.merged.nodup.tn5.pval0.01.300K.bfilt.narrowPeak.bb",
        "frip_qc": "gs://gbsc-gcp-project-hummingbird-user-xingziye/atac/b5e931fc-22e5-4c60-844b-0333ab0bf47e/call-macs2/shard-0/glob-156b027b56a0fc9230201b265d9f4bf4/ENCFF341MYG.subsampled.400.trim.merged.nodup.tn5.pval0.01.300K.bfilt.frip.qc",
        "bfilt_npeak_hammock": ["gs://gbsc-gcp-project-hummingbird-user-xingziye/atac/b5e931fc-22e5-4c60-844b-0333ab0bf47e/call-macs2/shard-0/glob-08ed81b9c4c9ccf6c3692d9ea29b11e0/ENCFF341MYG.subsampled.400.trim.merged.nodup.tn5.pval0.01.300K.bfilt.narrowPeak.hammock.gz", "gs://gbsc-gcp-project-hummingbird-user-xingziye/atac/b5e931fc-22e5-4c60-844b-0333ab0bf47e/call-macs2/shard-0/glob-08ed81b9c4c9ccf6c3692d9ea29b11e0/ENCFF341MYG.subsampled.400.trim.merged.nodup.tn5.pval0.01.300K.bfilt.narrowPeak.hammock.gz.tbi"],
        "sig_pval": "gs://gbsc-gcp-project-hummingbird-user-xingziye/atac/b5e931fc-22e5-4c60-844b-0333ab0bf47e/call-macs2/shard-0/glob-7ab0340dfeb10ca109917cbdcc568548/ENCFF341MYG.subsampled.400.trim.merged.nodup.tn5.pval.signal.bigwig",
        "npeak": "gs://gbsc-gcp-project-hummingbird-user-xingziye/atac/b5e931fc-22e5-4c60-844b-0333ab0bf47e/call-macs2/shard-0/glob-254907fcd430d7e6c9bf67ac4585adb4/ENCFF341MYG.subsampled.400.trim.merged.nodup.tn5.pval0.01.300K.narrowPeak.gz"
      },
      "runtimeAttributes": {
        "preemptible": "0",
        "failOnStderr": "false",
        "bootDiskSizeGb": "10",
        "disks": "local-disk 100 HDD",
        "continueOnReturnCode": "0",
        "docker": "quay.io/encode-dcc/atac-seq-pipeline:v1.1.3",
        "maxRetries": "0",
        "cpu": "1",
        "cpuMin": "1",
        "noAddress": "false",
        "zones": "us-central1-b",
        "memoryMin": "2048.0 MB",
        "memory": "16000.0 MB"
      },
      "callCaching": {
        "effectiveCallCachingMode": "CallCachingOff",
        "allowResultReuse": false
      },
      "inputs": {
        "blacklist": "gs://encode-pipeline-genome-data/hg38/hg38.blacklist.bed.gz",
        "ta": "gs://gbsc-gcp-project-hummingbird-user-xingziye/atac/b5e931fc-22e5-4c60-844b-0333ab0bf47e/call-bam2ta/shard-0/glob-199637d3015dccbe277f621a18be9eb4/ENCFF341MYG.subsampled.400.trim.merged.nodup.tn5.tagAlign.gz",
        "cap_num_peak": 300000,
        "mem_mb": 16000,
        "time_hr": 24,
        "pval_thresh": 0.01,
        "chrsz": "gs://encode-pipeline-genome-data/hg38/hg38.chrom.sizes",
        "disks": "local-disk 100 HDD",
        "keep_irregular_chr_in_bfilt_peak": false,
        "gensz": "hs",
        "make_signal": true,
        "smooth_win": 73
      },
      "backendLabels": {
        "wdl-task-name": "macs2",
        "cromwell-workflow-id": "cromwell-b5e931fc-22e5-4c60-844b-0333ab0bf47e"
      },
      "returnCode": 0,
      "labels": {
        "wdl-task-name": "macs2",
        "cromwell-workflow-id": "cromwell-b5e931fc-22e5-4c60-844b-0333ab0bf47e"
      },
      "jobId": "operations/EKzZyfydLRjEnq2d_anq4Fkg6_2gxpcfKg9wcm9kdWN0aW9uUXVldWU",
      "backend": "PAPIv2",
      "end": "2019-04-02T12:49:39.875-07:00",
      "dockerImageUsed": "quay.io/encode-dcc/atac-seq-pipeline@sha256:ff3992deeefa7ac10fe633adae9369225643e5e922a68e465178c0be63039787",
      "stderr": "gs://gbsc-gcp-project-hummingbird-user-xingziye/atac/b5e931fc-22e5-4c60-844b-0333ab0bf47e/call-macs2/shard-0/stderr",
      "callRoot": "gs://gbsc-gcp-project-hummingbird-user-xingziye/atac/b5e931fc-22e5-4c60-844b-0333ab0bf47e/call-macs2/shard-0",
      "attempt": 1,
      "executionEvents": [{
        "description": "initializing VM",
        "startTime": "2019-04-02T19:41:53Z",
        "endTime": "2019-04-02T19:42:21.597084726Z"
      }, {
        "endTime": "2019-04-02T12:41:21.762-07:00",
        "startTime": "2019-04-02T12:41:21.761-07:00",
        "description": "Pending"
      }, {
        "endTime": "2019-04-02T12:49:39.875-07:00",
        "startTime": "2019-04-02T12:49:39.875-07:00",
        "description": "UpdatingJobStore"
      }, {
        "endTime": "2019-04-02T12:41:21.774-07:00",
        "description": "WaitingForValueStore",
        "startTime": "2019-04-02T12:41:21.773-07:00"
      }, {
        "endTime": "2019-04-02T19:41:49Z",
        "startTime": "2019-04-02T12:41:21.786-07:00",
        "description": "RunningJob"
      }, {
        "endTime": "2019-04-02T19:44:32.973919955Z",
        "startTime": "2019-04-02T19:42:21.597207156Z",
        "description": "pulling-image"
      }, {
        "endTime": "2019-04-02T12:41:21.786-07:00",
        "description": "PreparingJob",
        "startTime": "2019-04-02T12:41:21.774-07:00"
      }, {
        "startTime": "2019-04-02T19:48:09.261166827Z",
        "description": "delocalizing-files",
        "endTime": "2019-04-02T19:48:35.154533351Z"
      }, {
        "description": "cromwell poll interval",
        "endTime": "2019-04-02T12:49:39.875-07:00",
        "startTime": "2019-04-02T19:48:35.154533351Z"
      }, {
        "endTime": "2019-04-02T19:42:21.597207156Z",
        "startTime": "2019-04-02T19:42:21.597084726Z",
        "description": "start"
      }, {
        "endTime": "2019-04-02T19:48:35.154533351Z",
        "description": "ok",
        "startTime": "2019-04-02T19:48:35.154533351Z"
      }, {
        "description": "localizing-files",
        "endTime": "2019-04-02T19:44:39.463269618Z",
        "startTime": "2019-04-02T19:44:32.973919955Z"
      }, {
        "startTime": "2019-04-02T12:41:21.762-07:00",
        "description": "RequestingExecutionToken",
        "endTime": "2019-04-02T12:41:21.773-07:00"
      }, {
        "startTime": "2019-04-02T19:41:49Z",
        "description": "waiting for quota",
        "endTime": "2019-04-02T19:41:53Z"
      }, {
        "description": "running-docker",
        "startTime": "2019-04-02T19:44:39.463269618Z",
        "endTime": "2019-04-02T19:48:09.261166827Z"
      }],
      "backendLogs": {
        "log": "gs://gbsc-gcp-project-hummingbird-user-xingziye/atac/b5e931fc-22e5-4c60-844b-0333ab0bf47e/call-macs2/shard-0/macs2-0.log"
      },
      "start": "2019-04-02T12:41:21.761-07:00"
    }],
    "atac.xcor": [{
      "preemptible": false,
      "executionStatus": "Done",
      "stdout": "gs://gbsc-gcp-project-hummingbird-user-xingziye/atac/b5e931fc-22e5-4c60-844b-0333ab0bf47e/call-xcor/shard-0/stdout",
      "backendStatus": "Success",
      "shardIndex": 0,
      "jes": {
        "endpointUrl": "https://genomics.googleapis.com/",
        "machineType": "us-central1-b/n1-highcpu-32",
        "googleProject": "gbsc-gcp-project-cba",
        "executionBucket": "gs://gbsc-gcp-project-hummingbird-user-xingziye",
        "zone": "us-central1-b",
        "instanceName": "ggp-6356087420686563633"
      },
      "outputs": {
        "score": "gs://gbsc-gcp-project-hummingbird-user-xingziye/atac/b5e931fc-22e5-4c60-844b-0333ab0bf47e/call-xcor/shard-0/glob-75e08482e6a5fe7a0d0013bbdfdf694c/ENCFF341MYG.subsampled.400.trim.merged.nodup.tn5.no_chrM.R1.25M.cc.qc",
        "plot_png": "gs://gbsc-gcp-project-hummingbird-user-xingziye/atac/b5e931fc-22e5-4c60-844b-0333ab0bf47e/call-xcor/shard-0/glob-c0eba07eee633b4055d7d9d85813fdf5/ENCFF341MYG.subsampled.400.trim.merged.nodup.tn5.no_chrM.R1.25M.cc.plot.png",
        "plot_pdf": "gs://gbsc-gcp-project-hummingbird-user-xingziye/atac/b5e931fc-22e5-4c60-844b-0333ab0bf47e/call-xcor/shard-0/glob-febe739b0bd718b63be38dddfffc9043/ENCFF341MYG.subsampled.400.trim.merged.nodup.tn5.no_chrM.R1.25M.cc.plot.pdf",
        "fraglen": 0
      },
      "runtimeAttributes": {
        "preemptible": "0",
        "failOnStderr": "false",
        "bootDiskSizeGb": "10",
        "disks": "local-disk 100 HDD",
        "continueOnReturnCode": "0",
        "docker": "quay.io/encode-dcc/atac-seq-pipeline:v1.1.3",
        "maxRetries": "0",
        "cpu": "32",
        "cpuMin": "1",
        "noAddress": "false",
        "zones": "us-central1-b",
        "memoryMin": "2048.0 MB",
        "memory": "16000.0 MB"
      },
      "callCaching": {
        "allowResultReuse": false,
        "effectiveCallCachingMode": "CallCachingOff"
      },
      "inputs": {
        "ta": "gs://gbsc-gcp-project-hummingbird-user-xingziye/atac/b5e931fc-22e5-4c60-844b-0333ab0bf47e/call-bam2ta/shard-0/glob-199637d3015dccbe277f621a18be9eb4/ENCFF341MYG.subsampled.400.trim.merged.nodup.tn5.tagAlign.gz",
        "subsample": 25000000,
        "mem_mb": 16000,
        "time_hr": 6,
        "disks": "local-disk 100 HDD",
        "cpu": 32,
        "paired_end": true
      },
      "backendLabels": {
        "cromwell-workflow-id": "cromwell-b5e931fc-22e5-4c60-844b-0333ab0bf47e",
        "wdl-task-name": "xcor"
      },
      "returnCode": 0,
      "labels": {
        "wdl-task-name": "xcor",
        "cromwell-workflow-id": "cromwell-b5e931fc-22e5-4c60-844b-0333ab0bf47e"
      },
      "jobId": "operations/EJXZyfydLRix8ue61PrWmlgg6_2gxpcfKg9wcm9kdWN0aW9uUXVldWU",
      "backend": "PAPIv2",
      "end": "2019-04-02T12:46:51.749-07:00",
      "dockerImageUsed": "quay.io/encode-dcc/atac-seq-pipeline@sha256:ff3992deeefa7ac10fe633adae9369225643e5e922a68e465178c0be63039787",
      "stderr": "gs://gbsc-gcp-project-hummingbird-user-xingziye/atac/b5e931fc-22e5-4c60-844b-0333ab0bf47e/call-xcor/shard-0/stderr",
      "callRoot": "gs://gbsc-gcp-project-hummingbird-user-xingziye/atac/b5e931fc-22e5-4c60-844b-0333ab0bf47e/call-xcor/shard-0",
      "attempt": 1,
      "executionEvents": [{
        "endTime": "2019-04-02T19:42:25.492437286Z",
        "description": "start",
        "startTime": "2019-04-02T19:42:25.492294253Z"
      }, {
        "description": "localizing-files",
        "startTime": "2019-04-02T19:44:45.821720066Z",
        "endTime": "2019-04-02T19:44:49.767578811Z"
      }, {
        "endTime": "2019-04-02T12:41:21.796-07:00",
        "description": "PreparingJob",
        "startTime": "2019-04-02T12:41:21.775-07:00"
      }, {
        "endTime": "2019-04-02T19:45:05.980508190Z",
        "description": "running-docker",
        "startTime": "2019-04-02T19:44:49.767578811Z"
      }, {
        "startTime": "2019-04-02T19:45:05.980508190Z",
        "description": "delocalizing-files",
        "endTime": "2019-04-02T19:45:22.638664460Z"
      }, {
        "endTime": "2019-04-02T19:41:49Z",
        "startTime": "2019-04-02T12:41:21.796-07:00",
        "description": "RunningJob"
      }, {
        "startTime": "2019-04-02T19:42:25.492437286Z",
        "description": "pulling-image",
        "endTime": "2019-04-02T19:44:45.821720066Z"
      }, {
        "endTime": "2019-04-02T12:46:51.749-07:00",
        "startTime": "2019-04-02T12:46:51.749-07:00",
        "description": "UpdatingJobStore"
      }, {
        "endTime": "2019-04-02T19:45:23Z",
        "startTime": "2019-04-02T19:45:22.638664460Z",
        "description": "ok"
      }, {
        "startTime": "2019-04-02T12:41:21.762-07:00",
        "endTime": "2019-04-02T12:41:21.762-07:00",
        "description": "Pending"
      }, {
        "endTime": "2019-04-02T12:41:21.775-07:00",
        "description": "WaitingForValueStore",
        "startTime": "2019-04-02T12:41:21.773-07:00"
      }, {
        "startTime": "2019-04-02T12:41:21.762-07:00",
        "description": "RequestingExecutionToken",
        "endTime": "2019-04-02T12:41:21.773-07:00"
      }, {
        "endTime": "2019-04-02T12:46:51.749-07:00",
        "startTime": "2019-04-02T19:45:23Z",
        "description": "cromwell poll interval"
      }, {
        "description": "initializing VM",
        "startTime": "2019-04-02T19:41:54Z",
        "endTime": "2019-04-02T19:42:25.492294253Z"
      }, {
        "description": "waiting for quota",
        "endTime": "2019-04-02T19:41:54Z",
        "startTime": "2019-04-02T19:41:49Z"
      }],
      "backendLogs": {
        "log": "gs://gbsc-gcp-project-hummingbird-user-xingziye/atac/b5e931fc-22e5-4c60-844b-0333ab0bf47e/call-xcor/shard-0/xcor-0.log"
      },
      "start": "2019-04-02T12:41:21.762-07:00"
    }],
    "atac.trim_adapter": [{
      "preemptible": false,
      "executionStatus": "Done",
      "stdout": "gs://gbsc-gcp-project-hummingbird-user-xingziye/atac/b5e931fc-22e5-4c60-844b-0333ab0bf47e/call-trim_adapter/shard-0/stdout",
      "backendStatus": "Success",
      "shardIndex": 0,
      "jes": {
        "endpointUrl": "https://genomics.googleapis.com/",
        "machineType": "us-central1-b/n1-highcpu-32",
        "googleProject": "gbsc-gcp-project-cba",
        "executionBucket": "gs://gbsc-gcp-project-hummingbird-user-xingziye",
        "zone": "us-central1-b",
        "instanceName": "ggp-3930026158277037641"
      },
      "outputs": {
        "trimmed_merged_fastqs": ["gs://gbsc-gcp-project-hummingbird-user-xingziye/atac/b5e931fc-22e5-4c60-844b-0333ab0bf47e/call-trim_adapter/shard-0/glob-4f26c666d13d1cb48973da7f646a7de2/merge_fastqs_R1_ENCFF341MYG.subsampled.400.trim.merged.fastq.gz", "gs://gbsc-gcp-project-hummingbird-user-xingziye/atac/b5e931fc-22e5-4c60-844b-0333ab0bf47e/call-trim_adapter/shard-0/glob-4f26c666d13d1cb48973da7f646a7de2/merge_fastqs_R2_ENCFF248EJF.subsampled.400.trim.merged.fastq.gz"]
      },
      "runtimeAttributes": {
        "preemptible": "0",
        "failOnStderr": "false",
        "bootDiskSizeGb": "10",
        "disks": "local-disk 100 HDD",
        "continueOnReturnCode": "0",
        "docker": "quay.io/encode-dcc/atac-seq-pipeline:v1.1.3",
        "maxRetries": "0",
        "cpu": "32",
        "cpuMin": "1",
        "noAddress": "false",
        "zones": "us-central1-b",
        "memoryMin": "2048.0 MB",
        "memory": "12000.0 MB"
      },
      "callCaching": {
        "effectiveCallCachingMode": "CallCachingOff",
        "allowResultReuse": false
      },
      "inputs": {
        "auto_detect_adapter": true,
        "fastqs": [["gs://gbsc-gcp-project-hummingbird-user-xingziye/ENCODE/atac-seq-pipeline/ENCSR356KRQ/fastq_subsampled/rep1/pair1/ENCFF341MYG.subsampled.400.fastq.gz", "gs://gbsc-gcp-project-hummingbird-user-xingziye/ENCODE/atac-seq-pipeline/ENCSR356KRQ/fastq_subsampled/rep1/pair2/ENCFF248EJF.subsampled.400.fastq.gz"]],
        "mem_mb": 12000,
        "time_hr": 24,
        "disks": "local-disk 100 HDD",
        "cpu": 32,
        "paired_end": true,
        "adapters": [["gs://gbsc-gcp-project-hummingbird-user-xingziye/tmp/adapter.txt", "gs://gbsc-gcp-project-hummingbird-user-xingziye/tmp/adapter.txt"]],
        "err_rate": 0.1,
        "min_trim_len": 5
      },
      "backendLabels": {
        "wdl-task-name": "trim-adapter",
        "cromwell-workflow-id": "cromwell-b5e931fc-22e5-4c60-844b-0333ab0bf47e"
      },
      "returnCode": 0,
      "labels": {
        "cromwell-workflow-id": "cromwell-b5e931fc-22e5-4c60-844b-0333ab0bf47e",
        "wdl-task-name": "trim_adapter"
      },
      "jobId": "operations/EL7D3_udLRjJnOKQgL-QxTYg6_2gxpcfKg9wcm9kdWN0aW9uUXVldWU",
      "backend": "PAPIv2",
      "end": "2019-04-02T12:18:24.611-07:00",
      "dockerImageUsed": "quay.io/encode-dcc/atac-seq-pipeline@sha256:ff3992deeefa7ac10fe633adae9369225643e5e922a68e465178c0be63039787",
      "stderr": "gs://gbsc-gcp-project-hummingbird-user-xingziye/atac/b5e931fc-22e5-4c60-844b-0333ab0bf47e/call-trim_adapter/shard-0/stderr",
      "callRoot": "gs://gbsc-gcp-project-hummingbird-user-xingziye/atac/b5e931fc-22e5-4c60-844b-0333ab0bf47e/call-trim_adapter/shard-0",
      "attempt": 1,
      "executionEvents": [{
        "startTime": "2019-04-02T19:17:33.546957729Z",
        "endTime": "2019-04-02T19:17:33.546957729Z",
        "description": "ok"
      }, {
        "description": "start",
        "endTime": "2019-04-02T19:14:54.859720727Z",
        "startTime": "2019-04-02T19:14:54.859626059Z"
      }, {
        "endTime": "2019-04-02T12:18:24.607-07:00",
        "description": "cromwell poll interval",
        "startTime": "2019-04-02T19:17:33.546957729Z"
      }, {
        "description": "UpdatingJobStore",
        "startTime": "2019-04-02T12:18:24.607-07:00",
        "endTime": "2019-04-02T12:18:24.611-07:00"
      }, {
        "startTime": "2019-04-02T19:17:13.126713405Z",
        "description": "running-docker",
        "endTime": "2019-04-02T19:17:24.936197650Z"
      }, {
        "startTime": "2019-04-02T12:12:38.789-07:00",
        "endTime": "2019-04-02T12:12:39.715-07:00",
        "description": "RequestingExecutionToken"
      }, {
        "endTime": "2019-04-02T19:14:54.859626059Z",
        "startTime": "2019-04-02T19:12:56Z",
        "description": "initializing VM"
      }, {
        "description": "RunningJob",
        "startTime": "2019-04-02T12:12:39.746-07:00",
        "endTime": "2019-04-02T19:12:49Z"
      }, {
        "endTime": "2019-04-02T19:12:56Z",
        "description": "waiting for quota",
        "startTime": "2019-04-02T19:12:49Z"
      }, {
        "endTime": "2019-04-02T12:12:39.746-07:00",
        "description": "PreparingJob",
        "startTime": "2019-04-02T12:12:39.716-07:00"
      }, {
        "startTime": "2019-04-02T12:12:38.788-07:00",
        "endTime": "2019-04-02T12:12:38.789-07:00",
        "description": "Pending"
      }, {
        "startTime": "2019-04-02T19:14:54.859720727Z",
        "endTime": "2019-04-02T19:17:03.907823252Z",
        "description": "pulling-image"
      }, {
        "endTime": "2019-04-02T12:12:39.716-07:00",
        "description": "WaitingForValueStore",
        "startTime": "2019-04-02T12:12:39.715-07:00"
      }, {
        "startTime": "2019-04-02T19:17:03.907823252Z",
        "endTime": "2019-04-02T19:17:13.126713405Z",
        "description": "localizing-files"
      }, {
        "startTime": "2019-04-02T19:17:24.936197650Z",
        "description": "delocalizing-files",
        "endTime": "2019-04-02T19:17:33.546957729Z"
      }],
      "backendLogs": {
        "log": "gs://gbsc-gcp-project-hummingbird-user-xingziye/atac/b5e931fc-22e5-4c60-844b-0333ab0bf47e/call-trim_adapter/shard-0/trim_adapter-0.log"
      },
      "start": "2019-04-02T12:12:38.788-07:00"
    }],
    "atac.spr": [{
      "preemptible": false,
      "executionStatus": "Done",
      "stdout": "gs://gbsc-gcp-project-hummingbird-user-xingziye/atac/b5e931fc-22e5-4c60-844b-0333ab0bf47e/call-spr/shard-0/stdout",
      "backendStatus": "Success",
      "shardIndex": 0,
      "jes": {
        "endpointUrl": "https://genomics.googleapis.com/",
        "machineType": "us-central1-b/n1-highmem-4",
        "googleProject": "gbsc-gcp-project-cba",
        "executionBucket": "gs://gbsc-gcp-project-hummingbird-user-xingziye",
        "zone": "us-central1-b",
        "instanceName": "ggp-12374930108153539533"
      },
      "outputs": {
        "ta_pr1": "gs://gbsc-gcp-project-hummingbird-user-xingziye/atac/b5e931fc-22e5-4c60-844b-0333ab0bf47e/call-spr/shard-0/glob-478c0ad30d0d033ce59a75ef84dab32e/ENCFF341MYG.subsampled.400.trim.merged.nodup.tn5.pr1.tagAlign.gz",
        "ta_pr2": "gs://gbsc-gcp-project-hummingbird-user-xingziye/atac/b5e931fc-22e5-4c60-844b-0333ab0bf47e/call-spr/shard-0/glob-a7cc663e5a8a49cc3d9bc036f4370f1c/ENCFF341MYG.subsampled.400.trim.merged.nodup.tn5.pr2.tagAlign.gz"
      },
      "runtimeAttributes": {
        "preemptible": "0",
        "failOnStderr": "false",
        "bootDiskSizeGb": "10",
        "disks": "local-disk 50 HDD",
        "continueOnReturnCode": "0",
        "docker": "quay.io/encode-dcc/atac-seq-pipeline:v1.1.3",
        "maxRetries": "0",
        "cpu": "1",
        "cpuMin": "1",
        "noAddress": "false",
        "zones": "us-central1-b",
        "memoryMin": "2048.0 MB",
        "memory": "16000.0 MB"
      },
      "callCaching": {
        "allowResultReuse": false,
        "effectiveCallCachingMode": "CallCachingOff"
      },
      "inputs": {
        "mem_mb": 16000,
        "ta": "gs://gbsc-gcp-project-hummingbird-user-xingziye/atac/b5e931fc-22e5-4c60-844b-0333ab0bf47e/call-bam2ta/shard-0/glob-199637d3015dccbe277f621a18be9eb4/ENCFF341MYG.subsampled.400.trim.merged.nodup.tn5.tagAlign.gz",
        "paired_end": true
      },
      "backendLabels": {
        "cromwell-workflow-id": "cromwell-b5e931fc-22e5-4c60-844b-0333ab0bf47e",
        "wdl-task-name": "spr"
      },
      "returnCode": 0,
      "labels": {
        "wdl-task-name": "spr",
        "cromwell-workflow-id": "cromwell-b5e931fc-22e5-4c60-844b-0333ab0bf47e"
      },
      "jobId": "operations/EKzZyfydLRjN15yG5Kul3qsBIOv9oMaXHyoPcHJvZHVjdGlvblF1ZXVl",
      "backend": "PAPIv2",
      "end": "2019-04-02T12:45:10.521-07:00",
      "dockerImageUsed": "quay.io/encode-dcc/atac-seq-pipeline@sha256:ff3992deeefa7ac10fe633adae9369225643e5e922a68e465178c0be63039787",
      "stderr": "gs://gbsc-gcp-project-hummingbird-user-xingziye/atac/b5e931fc-22e5-4c60-844b-0333ab0bf47e/call-spr/shard-0/stderr",
      "callRoot": "gs://gbsc-gcp-project-hummingbird-user-xingziye/atac/b5e931fc-22e5-4c60-844b-0333ab0bf47e/call-spr/shard-0",
      "attempt": 1,
      "executionEvents": [{
        "endTime": "2019-04-02T19:41:54Z",
        "description": "waiting for quota",
        "startTime": "2019-04-02T19:41:49Z"
      }, {
        "startTime": "2019-04-02T19:44:39.587609903Z",
        "endTime": "2019-04-02T12:45:10.521-07:00",
        "description": "cromwell poll interval"
      }, {
        "endTime": "2019-04-02T19:42:14.832480798Z",
        "description": "start",
        "startTime": "2019-04-02T19:42:14.832406726Z"
      }, {
        "description": "pulling-image",
        "startTime": "2019-04-02T19:42:14.832480798Z",
        "endTime": "2019-04-02T19:44:12.600560355Z"
      }, {
        "endTime": "2019-04-02T12:41:21.781-07:00",
        "startTime": "2019-04-02T12:41:21.773-07:00",
        "description": "PreparingJob"
      }, {
        "startTime": "2019-04-02T19:44:29.732540487Z",
        "endTime": "2019-04-02T19:44:39.587609903Z",
        "description": "delocalizing-files"
      }, {
        "endTime": "2019-04-02T19:44:29.732540487Z",
        "description": "running-docker",
        "startTime": "2019-04-02T19:44:20.207880857Z"
      }, {
        "description": "ok",
        "endTime": "2019-04-02T19:44:39.587609903Z",
        "startTime": "2019-04-02T19:44:39.587609903Z"
      }, {
        "startTime": "2019-04-02T12:41:21.762-07:00",
        "endTime": "2019-04-02T12:41:21.762-07:00",
        "description": "Pending"
      }, {
        "endTime": "2019-04-02T12:41:21.773-07:00",
        "description": "RequestingExecutionToken",
        "startTime": "2019-04-02T12:41:21.762-07:00"
      }, {
        "startTime": "2019-04-02T12:41:21.781-07:00",
        "description": "RunningJob",
        "endTime": "2019-04-02T19:41:49Z"
      }, {
        "endTime": "2019-04-02T19:44:20.207880857Z",
        "description": "localizing-files",
        "startTime": "2019-04-02T19:44:12.600560355Z"
      }, {
        "description": "UpdatingJobStore",
        "startTime": "2019-04-02T12:45:10.521-07:00",
        "endTime": "2019-04-02T12:45:10.521-07:00"
      }, {
        "endTime": "2019-04-02T19:42:14.832406726Z",
        "startTime": "2019-04-02T19:41:54Z",
        "description": "initializing VM"
      }, {
        "startTime": "2019-04-02T12:41:21.773-07:00",
        "description": "WaitingForValueStore",
        "endTime": "2019-04-02T12:41:21.773-07:00"
      }],
      "backendLogs": {
        "log": "gs://gbsc-gcp-project-hummingbird-user-xingziye/atac/b5e931fc-22e5-4c60-844b-0333ab0bf47e/call-spr/shard-0/spr-0.log"
      },
      "start": "2019-04-02T12:41:21.762-07:00"
    }],
    "atac.macs2_pr1": [{
      "preemptible": false,
      "executionStatus": "Done",
      "stdout": "gs://gbsc-gcp-project-hummingbird-user-xingziye/atac/b5e931fc-22e5-4c60-844b-0333ab0bf47e/call-macs2_pr1/shard-0/stdout",
      "backendStatus": "Success",
      "shardIndex": 0,
      "jes": {
        "endpointUrl": "https://genomics.googleapis.com/",
        "machineType": "us-central1-b/n1-highmem-4",
        "googleProject": "gbsc-gcp-project-cba",
        "executionBucket": "gs://gbsc-gcp-project-hummingbird-user-xingziye",
        "zone": "us-central1-b",
        "instanceName": "ggp-17848697953381794601"
      },
      "outputs": {
        "sig_fc": "gs://gbsc-gcp-project-hummingbird-user-xingziye/atac/b5e931fc-22e5-4c60-844b-0333ab0bf47e/call-macs2_pr1/shard-0/glob-37a6259cc0c1dae299a7866489dff0bd/null",
        "bfilt_npeak": "gs://gbsc-gcp-project-hummingbird-user-xingziye/atac/b5e931fc-22e5-4c60-844b-0333ab0bf47e/call-macs2_pr1/shard-0/glob-2e6c87fc90e45fa5dbda88934d454cd3/ENCFF341MYG.subsampled.400.trim.merged.nodup.tn5.pr1.pval0.01.300K.bfilt.narrowPeak.gz",
        "bfilt_npeak_bb": "gs://gbsc-gcp-project-hummingbird-user-xingziye/atac/b5e931fc-22e5-4c60-844b-0333ab0bf47e/call-macs2_pr1/shard-0/glob-155eada107f68a2195912a39f5dee4bc/ENCFF341MYG.subsampled.400.trim.merged.nodup.tn5.pr1.pval0.01.300K.bfilt.narrowPeak.bb",
        "frip_qc": "gs://gbsc-gcp-project-hummingbird-user-xingziye/atac/b5e931fc-22e5-4c60-844b-0333ab0bf47e/call-macs2_pr1/shard-0/glob-156b027b56a0fc9230201b265d9f4bf4/ENCFF341MYG.subsampled.400.trim.merged.nodup.tn5.pr1.pval0.01.300K.bfilt.frip.qc",
        "bfilt_npeak_hammock": ["gs://gbsc-gcp-project-hummingbird-user-xingziye/atac/b5e931fc-22e5-4c60-844b-0333ab0bf47e/call-macs2_pr1/shard-0/glob-08ed81b9c4c9ccf6c3692d9ea29b11e0/ENCFF341MYG.subsampled.400.trim.merged.nodup.tn5.pr1.pval0.01.300K.bfilt.narrowPeak.hammock.gz", "gs://gbsc-gcp-project-hummingbird-user-xingziye/atac/b5e931fc-22e5-4c60-844b-0333ab0bf47e/call-macs2_pr1/shard-0/glob-08ed81b9c4c9ccf6c3692d9ea29b11e0/ENCFF341MYG.subsampled.400.trim.merged.nodup.tn5.pr1.pval0.01.300K.bfilt.narrowPeak.hammock.gz.tbi"],
        "sig_pval": "gs://gbsc-gcp-project-hummingbird-user-xingziye/atac/b5e931fc-22e5-4c60-844b-0333ab0bf47e/call-macs2_pr1/shard-0/glob-37a6259cc0c1dae299a7866489dff0bd/null",
        "npeak": "gs://gbsc-gcp-project-hummingbird-user-xingziye/atac/b5e931fc-22e5-4c60-844b-0333ab0bf47e/call-macs2_pr1/shard-0/glob-254907fcd430d7e6c9bf67ac4585adb4/ENCFF341MYG.subsampled.400.trim.merged.nodup.tn5.pr1.pval0.01.300K.narrowPeak.gz"
      },
      "runtimeAttributes": {
        "preemptible": "0",
        "failOnStderr": "false",
        "bootDiskSizeGb": "10",
        "disks": "local-disk 100 HDD",
        "continueOnReturnCode": "0",
        "docker": "quay.io/encode-dcc/atac-seq-pipeline:v1.1.3",
        "maxRetries": "0",
        "cpu": "1",
        "cpuMin": "1",
        "noAddress": "false",
        "zones": "us-central1-b",
        "memoryMin": "2048.0 MB",
        "memory": "16000.0 MB"
      },
      "callCaching": {
        "allowResultReuse": false,
        "effectiveCallCachingMode": "CallCachingOff"
      },
      "inputs": {
        "blacklist": "gs://encode-pipeline-genome-data/hg38/hg38.blacklist.bed.gz",
        "ta": "gs://gbsc-gcp-project-hummingbird-user-xingziye/atac/b5e931fc-22e5-4c60-844b-0333ab0bf47e/call-spr/shard-0/glob-478c0ad30d0d033ce59a75ef84dab32e/ENCFF341MYG.subsampled.400.trim.merged.nodup.tn5.pr1.tagAlign.gz",
        "cap_num_peak": 300000,
        "mem_mb": 16000,
        "time_hr": 24,
        "pval_thresh": 0.01,
        "chrsz": "gs://encode-pipeline-genome-data/hg38/hg38.chrom.sizes",
        "disks": "local-disk 100 HDD",
        "keep_irregular_chr_in_bfilt_peak": false,
        "gensz": "hs",
        "make_signal": false,
        "smooth_win": 73
      },
      "backendLabels": {
        "wdl-call-alias": "macs2-pr1",
        "wdl-task-name": "macs2",
        "cromwell-workflow-id": "cromwell-b5e931fc-22e5-4c60-844b-0333ab0bf47e"
      },
      "returnCode": 0,
      "labels": {
        "wdl-task-name": "macs2",
        "cromwell-workflow-id": "cromwell-b5e931fc-22e5-4c60-844b-0333ab0bf47e",
        "wdl-call-alias": "macs2_pr1"
      },
      "jobId": "operations/EIaC2PydLRiphsH0jYfU2fcBIOv9oMaXHyoPcHJvZHVjdGlvblF1ZXVl",
      "backend": "PAPIv2",
      "end": "2019-04-02T12:51:53.710-07:00",
      "dockerImageUsed": "quay.io/encode-dcc/atac-seq-pipeline@sha256:ff3992deeefa7ac10fe633adae9369225643e5e922a68e465178c0be63039787",
      "stderr": "gs://gbsc-gcp-project-hummingbird-user-xingziye/atac/b5e931fc-22e5-4c60-844b-0333ab0bf47e/call-macs2_pr1/shard-0/stderr",
      "callRoot": "gs://gbsc-gcp-project-hummingbird-user-xingziye/atac/b5e931fc-22e5-4c60-844b-0333ab0bf47e/call-macs2_pr1/shard-0",
      "attempt": 1,
      "executionEvents": [{
        "endTime": "2019-04-02T19:46:37.972826357Z",
        "startTime": "2019-04-02T19:45:48Z",
        "description": "initializing VM"
      }, {
        "endTime": "2019-04-02T12:45:12.780-07:00",
        "startTime": "2019-04-02T12:45:12.293-07:00",
        "description": "RequestingExecutionToken"
      }, {
        "endTime": "2019-04-02T19:45:48Z",
        "startTime": "2019-04-02T19:45:43Z",
        "description": "waiting for quota"
      }, {
        "endTime": "2019-04-02T12:51:53.710-07:00",
        "startTime": "2019-04-02T19:51:49Z",
        "description": "cromwell poll interval"
      }, {
        "description": "delocalizing-files",
        "endTime": "2019-04-02T19:51:48.826039207Z",
        "startTime": "2019-04-02T19:51:24.586563882Z"
      }, {
        "endTime": "2019-04-02T19:46:37.972904889Z",
        "startTime": "2019-04-02T19:46:37.972826357Z",
        "description": "start"
      }, {
        "endTime": "2019-04-02T19:48:23.316010401Z",
        "description": "localizing-files",
        "startTime": "2019-04-02T19:48:17.351391053Z"
      }, {
        "startTime": "2019-04-02T19:48:23.316010401Z",
        "description": "running-docker",
        "endTime": "2019-04-02T19:51:24.586563882Z"
      }, {
        "description": "PreparingJob",
        "endTime": "2019-04-02T12:45:12.788-07:00",
        "startTime": "2019-04-02T12:45:12.781-07:00"
      }, {
        "startTime": "2019-04-02T19:51:48.826039207Z",
        "description": "ok",
        "endTime": "2019-04-02T19:51:49Z"
      }, {
        "startTime": "2019-04-02T12:45:12.293-07:00",
        "endTime": "2019-04-02T12:45:12.293-07:00",
        "description": "Pending"
      }, {
        "endTime": "2019-04-02T12:45:12.781-07:00",
        "description": "WaitingForValueStore",
        "startTime": "2019-04-02T12:45:12.780-07:00"
      }, {
        "startTime": "2019-04-02T12:51:53.710-07:00",
        "endTime": "2019-04-02T12:51:53.710-07:00",
        "description": "UpdatingJobStore"
      }, {
        "startTime": "2019-04-02T12:45:12.788-07:00",
        "description": "RunningJob",
        "endTime": "2019-04-02T19:45:43Z"
      }, {
        "endTime": "2019-04-02T19:48:17.351391053Z",
        "description": "pulling-image",
        "startTime": "2019-04-02T19:46:37.972904889Z"
      }],
      "backendLogs": {
        "log": "gs://gbsc-gcp-project-hummingbird-user-xingziye/atac/b5e931fc-22e5-4c60-844b-0333ab0bf47e/call-macs2_pr1/shard-0/macs2_pr1-0.log"
      },
      "start": "2019-04-02T12:45:12.293-07:00"
    }],
    "atac.bowtie2": [{
      "preemptible": false,
      "executionStatus": "Done",
      "stdout": "gs://gbsc-gcp-project-hummingbird-user-xingziye/atac/b5e931fc-22e5-4c60-844b-0333ab0bf47e/call-bowtie2/shard-0/stdout",
      "backendStatus": "Success",
      "shardIndex": 0,
      "jes": {
        "endpointUrl": "https://genomics.googleapis.com/",
        "machineType": "us-central1-b/n1-highmem-4",
        "googleProject": "gbsc-gcp-project-cba",
        "executionBucket": "gs://gbsc-gcp-project-hummingbird-user-xingziye",
        "zone": "us-central1-b",
        "instanceName": "ggp-17422287859171201056"
      },
      "outputs": {
        "flagstat_qc": "gs://gbsc-gcp-project-hummingbird-user-xingziye/atac/b5e931fc-22e5-4c60-844b-0333ab0bf47e/call-bowtie2/shard-0/glob-e2a84eed5523fc4955f617236139026c/ENCFF341MYG.subsampled.400.trim.merged.flagstat.qc",
        "align_log": "gs://gbsc-gcp-project-hummingbird-user-xingziye/atac/b5e931fc-22e5-4c60-844b-0333ab0bf47e/call-bowtie2/shard-0/glob-2b79af24cb30a9eaebb132920a58f9c5/ENCFF341MYG.subsampled.400.trim.merged.align.log",
        "read_len_log": "gs://gbsc-gcp-project-hummingbird-user-xingziye/atac/b5e931fc-22e5-4c60-844b-0333ab0bf47e/call-bowtie2/shard-0/glob-773fb92850749a2b4a829cf3c8c4de27/ENCFF248EJF.subsampled.400.trim.merged.read_length.txt",
        "bai": "gs://gbsc-gcp-project-hummingbird-user-xingziye/atac/b5e931fc-22e5-4c60-844b-0333ab0bf47e/call-bowtie2/shard-0/glob-6efbc60cb1e0959bab4e467327a9416c/ENCFF341MYG.subsampled.400.trim.merged.bam.bai",
        "bam": "gs://gbsc-gcp-project-hummingbird-user-xingziye/atac/b5e931fc-22e5-4c60-844b-0333ab0bf47e/call-bowtie2/shard-0/glob-3bcbe4e7489c90f75e0523ac6f3a9385/ENCFF341MYG.subsampled.400.trim.merged.bam"
      },
      "runtimeAttributes": {
        "preemptible": "0",
        "failOnStderr": "false",
        "bootDiskSizeGb": "10",
        "disks": "local-disk 100 HDD",
        "continueOnReturnCode": "0",
        "docker": "quay.io/encode-dcc/atac-seq-pipeline:v1.1.3",
        "maxRetries": "0",
        "cpu": "4",
        "cpuMin": "1",
        "noAddress": "false",
        "zones": "us-central1-b",
        "memoryMin": "2048.0 MB",
        "memory": "16000.0 MB"
      },
      "callCaching": {
        "allowResultReuse": false,
        "effectiveCallCachingMode": "CallCachingOff"
      },
      "inputs": {
        "fastqs": ["gs://gbsc-gcp-project-hummingbird-user-xingziye/atac/b5e931fc-22e5-4c60-844b-0333ab0bf47e/call-trim_adapter/shard-0/glob-4f26c666d13d1cb48973da7f646a7de2/merge_fastqs_R1_ENCFF341MYG.subsampled.400.trim.merged.fastq.gz", "gs://gbsc-gcp-project-hummingbird-user-xingziye/atac/b5e931fc-22e5-4c60-844b-0333ab0bf47e/call-trim_adapter/shard-0/glob-4f26c666d13d1cb48973da7f646a7de2/merge_fastqs_R2_ENCFF248EJF.subsampled.400.trim.merged.fastq.gz"],
        "multimapping": 4,
        "mem_mb": 16000,
        "time_hr": 48,
        "disks": "local-disk 100 HDD",
        "score_min": "",
        "cpu": 4,
        "paired_end": true,
        "idx_tar": "gs://encode-pipeline-genome-data/hg38/bowtie2_index/GRCh38_no_alt_analysis_set_GCA_000001405.15.fasta.tar"
      },
      "backendLabels": {
        "cromwell-workflow-id": "cromwell-b5e931fc-22e5-4c60-844b-0333ab0bf47e",
        "wdl-task-name": "bowtie2"
      },
      "returnCode": 0,
      "labels": {
        "cromwell-workflow-id": "cromwell-b5e931fc-22e5-4c60-844b-0333ab0bf47e",
        "wdl-task-name": "bowtie2"
      },
      "jobId": "operations/EIGC-PudLRigoIDkgtCZ5PEBIOv9oMaXHyoPcHJvZHVjdGlvblF1ZXVl",
      "backend": "PAPIv2",
      "end": "2019-04-02T12:30:07.550-07:00",
      "dockerImageUsed": "quay.io/encode-dcc/atac-seq-pipeline@sha256:ff3992deeefa7ac10fe633adae9369225643e5e922a68e465178c0be63039787",
      "stderr": "gs://gbsc-gcp-project-hummingbird-user-xingziye/atac/b5e931fc-22e5-4c60-844b-0333ab0bf47e/call-bowtie2/shard-0/stderr",
      "callRoot": "gs://gbsc-gcp-project-hummingbird-user-xingziye/atac/b5e931fc-22e5-4c60-844b-0333ab0bf47e/call-bowtie2/shard-0",
      "attempt": 1,
      "executionEvents": [{
        "endTime": "2019-04-02T19:28:15.538719742Z",
        "description": "running-docker",
        "startTime": "2019-04-02T19:26:26.367425316Z"
      }, {
        "description": "PreparingJob",
        "startTime": "2019-04-02T12:19:00.729-07:00",
        "endTime": "2019-04-02T12:19:00.735-07:00"
      }, {
        "startTime": "2019-04-02T19:28:15.538719742Z",
        "description": "delocalizing-files",
        "endTime": "2019-04-02T19:28:34.448117076Z"
      }, {
        "endTime": "2019-04-02T19:25:44.394661014Z",
        "startTime": "2019-04-02T19:23:28.182069284Z",
        "description": "pulling-image"
      }, {
        "endTime": "2019-04-02T19:26:26.367425316Z",
        "startTime": "2019-04-02T19:25:44.394661014Z",
        "description": "localizing-files"
      }, {
        "startTime": "2019-04-02T19:19:30Z",
        "description": "waiting for quota",
        "endTime": "2019-04-02T19:19:37Z"
      }, {
        "endTime": "2019-04-02T19:23:28.181978411Z",
        "startTime": "2019-04-02T19:19:37Z",
        "description": "initializing VM"
      }, {
        "endTime": "2019-04-02T12:30:07.550-07:00",
        "startTime": "2019-04-02T12:30:07.550-07:00",
        "description": "UpdatingJobStore"
      }, {
        "endTime": "2019-04-02T12:19:00.287-07:00",
        "description": "Pending",
        "startTime": "2019-04-02T12:19:00.287-07:00"
      }, {
        "endTime": "2019-04-02T12:30:07.550-07:00",
        "description": "cromwell poll interval",
        "startTime": "2019-04-02T19:28:34.448117076Z"
      }, {
        "description": "ok",
        "endTime": "2019-04-02T19:28:34.448117076Z",
        "startTime": "2019-04-02T19:28:34.448117076Z"
      }, {
        "endTime": "2019-04-02T12:19:00.729-07:00",
        "description": "WaitingForValueStore",
        "startTime": "2019-04-02T12:19:00.728-07:00"
      }, {
        "endTime": "2019-04-02T19:19:30Z",
        "startTime": "2019-04-02T12:19:00.735-07:00",
        "description": "RunningJob"
      }, {
        "endTime": "2019-04-02T19:23:28.182069284Z",
        "startTime": "2019-04-02T19:23:28.181978411Z",
        "description": "start"
      }, {
        "endTime": "2019-04-02T12:19:00.728-07:00",
        "description": "RequestingExecutionToken",
        "startTime": "2019-04-02T12:19:00.287-07:00"
      }],
      "backendLogs": {
        "log": "gs://gbsc-gcp-project-hummingbird-user-xingziye/atac/b5e931fc-22e5-4c60-844b-0333ab0bf47e/call-bowtie2/shard-0/bowtie2-0.log"
      },
      "start": "2019-04-02T12:19:00.286-07:00"
    }]
  },
  "outputs": {
    "atac.qc_json": "gs://gbsc-gcp-project-hummingbird-user-xingziye/atac/b5e931fc-22e5-4c60-844b-0333ab0bf47e/call-qc_report/glob-3440f922973abb7a616aaf203e0db08b/qc.json",
    "atac.qc_json_match": false,
    "atac.report": "gs://gbsc-gcp-project-hummingbird-user-xingziye/atac/b5e931fc-22e5-4c60-844b-0333ab0bf47e/call-qc_report/glob-eae855c82d0f7e2185388856e7b2cc7b/qc.html"
  },
  "workflowRoot": "gs://gbsc-gcp-project-hummingbird-user-xingziye/atac/b5e931fc-22e5-4c60-844b-0333ab0bf47e/",
  "actualWorkflowLanguage": "WDL",
  "id": "b5e931fc-22e5-4c60-844b-0333ab0bf47e",
  "inputs": {
    "atac.adapters_rep6_R2": [],
    "atac.macs2_time_hr": 24,
    "atac.peak_pooled": null,
    "atac.peaks_pr2": [],
    "atac.fastqs_rep2_R2": [],
    "atac.keep_irregular_chr_in_bfilt_peak": false,
    "atac.qc_report.spp_cap_num_peak": null,
    "atac.adapters_rep2_R2": [],
    "atac.bam2ta_time_hr": 6,
    "atac.pipeline_type": "atac",
    "atac.align_only": false,
    "atac.fastqs_rep1_R1": [],
    "atac.trim_adapter_cpu": 32,
    "atac.filter_mem_mb": 12000,
    "atac.dup_marker": "picard",
    "atac.bam2ta_mem_mb": 10000,
    "atac.ataqc_mem_mb": 16000,
    "atac.trim_adapter_time_hr": 24,
    "atac.macs2_mem_mb": 16000,
    "atac.adapters": [[["gs://gbsc-gcp-project-hummingbird-user-xingziye/tmp/adapter.txt", "gs://gbsc-gcp-project-hummingbird-user-xingziye/tmp/adapter.txt"]]],
    "atac.bowtie2_score_min": "",
    "atac.auto_detect_adapter": true,
    "atac.trim_adapter_disks": "local-disk 100 HDD",
    "atac.xcor_time_hr": 6,
    "atac.fastqs_rep6_R1": [],
    "atac.adapters_rep5_R2": [],
    "atac.adapters_rep1_R1": [],
    "atac.adapters_rep5_R1": [],
    "atac.no_dup_removal": false,
    "atac.adapters_rep3_R1": [],
    "atac.qc_report.qc_json_ref": "gs://encode-pipeline-test-samples/encode-atac-seq-pipeline/ref_output/v1.1.6/ENCSR356KRQ/qc.json",
    "atac.idr_thresh": 0.05,
    "atac.adapters_rep1_R2": [],
    "atac.cutadapt_min_trim_len": 5,
    "atac.subsample_reads": 0,
    "atac.xcor_subsample_reads": 25000000,
    "atac.peak_ppr2": null,
    "atac.true_rep_only": false,
    "atac.bowtie2_disks": "local-disk 100 HDD",
    "atac.bams": [],
    "atac.peak_type": "narrowPeak",
    "atac.fastqs_rep2_R1": [],
    "atac.fastqs_rep3_R1": [],
    "atac.bowtie2_cpu": 4,
    "atac.spr_mem_mb": 16000,
    "atac.fastqs_rep6_R2": [],
    "atac.ataqc_disks": "local-disk 200 HDD",
    "atac.filter_cpu": 4,
    "atac.adapters_rep3_R2": [],
    "atac.fastqs_rep5_R2": [],
    "atac.adapters_rep4_R1": [],
    "atac.macs2_disks": "local-disk 100 HDD",
    "atac.regex_filter_reads": "chrM",
    "atac.adapters_rep2_R1": [],
    "atac.fastqs_rep4_R2": [],
    "atac.filter_time_hr": 24,
    "atac.peaks": [],
    "atac.description": "ATAC-seq on primary keratinocytes in day 0.0 of differentiation",
    "atac.fastqs_rep4_R1": [],
    "atac.filter_disks": "local-disk 100 HDD",
    "atac.ataqc_mem_java_mb": 16000,
    "atac.tas": [],
    "atac.enable_xcor": true,
    "atac.title": "ENCSR356KRQ_1M",
    "atac.bam2ta_cpu": 32,
    "atac.bowtie2_time_hr": 48,
    "atac.pval_thresh": 0.01,
    "atac.bam2ta_disks": "local-disk 100 HDD",
    "atac.cutadapt_err_rate": 0.1,
    "atac.peaks_pr1": [],
    "atac.fastqs_rep1_R2": [],
    "atac.adapters_rep6_R1": [],
    "atac.nodup_bams": [],
    "atac.cap_num_peak": 300000,
    "atac.xcor_cpu": 32,
    "atac.trim_adapter_mem_mb": 12000,
    "atac.disable_ataqc": false,
    "atac.adapters_rep4_R2": [],
    "atac.idr_rank": "p.value",
    "atac.multimapping": 4,
    "atac.fastqs_rep5_R1": [],
    "atac.xcor_mem_mb": 16000,
    "atac.fastqs": [[["gs://gbsc-gcp-project-hummingbird-user-xingziye/ENCODE/atac-seq-pipeline/ENCSR356KRQ/fastq_subsampled/rep1/pair1/ENCFF341MYG.subsampled.400.fastq.gz", "gs://gbsc-gcp-project-hummingbird-user-xingziye/ENCODE/atac-seq-pipeline/ENCSR356KRQ/fastq_subsampled/rep1/pair2/ENCFF248EJF.subsampled.400.fastq.gz"]]],
    "atac.mapq_thresh": 30,
    "atac.fastqs_rep3_R2": [],
    "atac.bowtie2_mem_mb": 16000,
    "atac.genome_tsv": "gs://encode-pipeline-genome-data/hg38_google.tsv",
    "atac.xcor_disks": "local-disk 100 HDD",
    "atac.paired_end": true,
    "atac.ataqc_time_hr": 24,
    "atac.peak_ppr1": null,
    "atac.enable_idr": true,
    "atac.smooth_win": 73
  },
  "labels": {
    "cromwell-workflow-id": "cromwell-b5e931fc-22e5-4c60-844b-0333ab0bf47e"
  },
  "submission": "2019-04-02T12:12:15.788-07:00",
  "status": "Succeeded",
  "end": "2019-04-02T13:24:48.043-07:00",
  "start": "2019-04-02T12:12:15.993-07:00"
}